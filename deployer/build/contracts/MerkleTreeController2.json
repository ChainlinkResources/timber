{
  "contractName": "MerkleTreeController2",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "treeHeight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "leafCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "insertLeaf",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treeWidth",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "latestRoot",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "insertLeaves",
      "outputs": [
        {
          "name": "root",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minLeafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValues",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "NewLeaves",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "_insertLeaf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "_insertLeaves",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"treeHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"_insertLeaves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"insertLeaf\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"_insertLeaf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treeWidth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"insertLeaves\",\"outputs\":[{\"name\":\"root\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minLeafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValues\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"NewLeaves\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"}},\"_insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"}},\"insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"},\"return\":\"bytes32 - the root of the merkle tree, after the insert.\"},\"insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"},\"return\":\"bytes32[] - the root of the merkle tree, after all the inserts.\"}}},\"userdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"notice\":\"Append a leaf to the tree\"},\"_insertLeaves(bytes32[])\":{\"notice\":\"Append leaves to the tree\"},\"constructor\":\"Constructor for the MerkleTreeController contract.\",\"insertLeaf(bytes32)\":{\"notice\":\"Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier.\"},\"insertLeaves(bytes32[])\":{\"notice\":\"Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTreeController2.sol\":\"MerkleTreeController2\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTree.sol\":{\"keccak256\":\"0x150d81b59fcf96684f250b07e6b2e2201ed48fb0d731b755025deffdd61c95ea\",\"urls\":[\"bzzr://50ac7dc5f4a4f41fdbe2a30d159adec7514768e83746701a99d1a962940e4cbf\"]},\"/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTreeController2.sol\":{\"keccak256\":\"0x067a1601e93b9a06534ccca5c41e15b834fc1c608efe217bf4d88143bcd08c0b\",\"urls\":[\"bzzr://dce289fc0bc50dbf233cdf925e5b42d0fb4698c09dfc931d8b29fb87c5e83a94\"]}},\"version\":1}",
  "bytecode": "0x6080604052602060005560005460020a600155600060281b600360006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c021790555034801561005757600080fd5b5033602560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610d7a806100a86000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806376c601b11161006657806376c601b1146101c85780638da5cb5b146101e6578063ae6dead714610230578063d7b0fef114610272578063dc52bf9f146102905761009e565b806301e3e915146100a357806303ebd1d4146100c157806330e69fc31461013a5780635c8b80ab1461015857806371b625411461019a575b600080fd5b6100ab61035c565b6040518082815260200191505060405180910390f35b610138600480360360208110156100d757600080fd5b81019080803590602001906401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b9091929391929390505050610362565b005b610142610462565b6040518082815260200191505060405180910390f35b6101846004803603602081101561016e57600080fd5b8101908080359060200190929190505050610468565b6040518082815260200191505060405180910390f35b6101c6600480360360208110156101b057600080fd5b81019080803590602001909291905050506106d2565b005b6101d0610790565b6040518082815260200191505060405180910390f35b6101ee610796565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561024657600080fd5b81019080803590602001909291905050506107bc565b6040518082815260200191505060405180910390f35b61027a6107d4565b6040518082815260200191505060405180910390f35b610346600480360360208110156102a657600080fd5b81019080803590602001906401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460208302840111640100000000831117156102f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506107da565b6040518082815260200191505060405180910390f35b60005481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610408576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b6000610454838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107da565b905080602781905550505050565b60025481565b6000600254600154116104c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60006104d3600254610c64565b9050600060018054600254010390506000602885901b90506000806104f6610cdb565b600080600090505b600054811015610653578781141561055257856004896021811061051e57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161055e57fe5b0614156105df576004816021811061057257fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146105ae576105b0565bfe5b50506028836000600181106105c157fe5b6020020151901b9550600260018803816105d757fe5b049650610646565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa9250826000811461061c5761061e565bfe5b505060288360006001811061062f57fe5b6020020151901b95506002878161064257fe5b0496505b80806001019150506104fe565b508160006001811061066157fe5b602002015197507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06002548a8a60405180848152602001838152602001828152602001935050505060405180910390a160026000815480929190600101919050555087975050505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b600061078382610468565b9050806027819055505050565b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b600080825190506002546001541161083d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60025460015403811115610886576000600254600154038203905060008090505b8181101561087a5760018551038552808060010191505061085e565b50600254600154039150505b6000806000806000610896610cdb565b60008060025490505b8860025401811015610a8e5760288b6002548303815181106108bd57fe5b6020026020010151901b95506001805482010396506108db81610c64565b9750600088141561092c5785600489602181106108f457fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c0217905550610a81565b6000600190505b888111610a3e5760006002898161094657fe5b0614156109ca576004600182036021811061095d57fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa935083600081146109995761099b565bfe5b50506028846000600181106109ac57fe5b6020020151901b9650600260018903816109c257fe5b049750610a31565b869550600360009054906101000a900460281b945060405186815285601b8201526020856036836002600019fa93508360008114610a0757610a09565bfe5b5050602884600060018110610a1a57fe5b6020020151901b965060028881610a2d57fe5b0497505b8080600101915050610933565b508560048960218110610a4d57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b808060010191505061089f565b5060006001880190505b6000548111610ba557600060028881610aad57fe5b061415610b315760046001820360218110610ac457fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa92508260008114610b0057610b02565bfe5b5050602883600060018110610b1357fe5b6020020151901b955060026001880381610b2957fe5b049650610b98565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa92508260008114610b6e57610b70565bfe5b5050602883600060018110610b8157fe5b6020020151901b955060028781610b9457fe5b0496505b8080600101915050610a98565b5081600060018110610bb357fe5b602002015198507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226002548b8b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c2f578082015181840152602081019050610c14565b5050505090500194505050505060405180910390a1876002600082825401925050819055508898505050505050505050919050565b6000809050600160028381610c7557fe5b061415610cd6576000600190506000600290506000600182901b90505b6000841415610cd25760008183600188010381610cab57fe5b061415610cba57829350610ccd565b809150600181901b905082806001019350505b610c92565b5050505b919050565b604051806020016040528060019060208202803883398082019150509050509056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652e596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a72305820cc4c1277ac39590b47cbba4ed966767a1299d448c4adbb6829bcc8f3f2e8bb040029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806376c601b11161006657806376c601b1146101c85780638da5cb5b146101e6578063ae6dead714610230578063d7b0fef114610272578063dc52bf9f146102905761009e565b806301e3e915146100a357806303ebd1d4146100c157806330e69fc31461013a5780635c8b80ab1461015857806371b625411461019a575b600080fd5b6100ab61035c565b6040518082815260200191505060405180910390f35b610138600480360360208110156100d757600080fd5b81019080803590602001906401000000008111156100f457600080fd5b82018360208201111561010657600080fd5b8035906020019184602083028401116401000000008311171561012857600080fd5b9091929391929390505050610362565b005b610142610462565b6040518082815260200191505060405180910390f35b6101846004803603602081101561016e57600080fd5b8101908080359060200190929190505050610468565b6040518082815260200191505060405180910390f35b6101c6600480360360208110156101b057600080fd5b81019080803590602001909291905050506106d2565b005b6101d0610790565b6040518082815260200191505060405180910390f35b6101ee610796565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561024657600080fd5b81019080803590602001909291905050506107bc565b6040518082815260200191505060405180910390f35b61027a6107d4565b6040518082815260200191505060405180910390f35b610346600480360360208110156102a657600080fd5b81019080803590602001906401000000008111156102c357600080fd5b8201836020820111156102d557600080fd5b803590602001918460208302840111640100000000831117156102f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506107da565b6040518082815260200191505060405180910390f35b60005481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610408576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b6000610454838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506107da565b905080602781905550505050565b60025481565b6000600254600154116104c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60006104d3600254610c64565b9050600060018054600254010390506000602885901b90506000806104f6610cdb565b600080600090505b600054811015610653578781141561055257856004896021811061051e57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b60006002888161055e57fe5b0614156105df576004816021811061057257fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa925082600081146105ae576105b0565bfe5b50506028836000600181106105c157fe5b6020020151901b9550600260018803816105d757fe5b049650610646565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa9250826000811461061c5761061e565bfe5b505060288360006001811061062f57fe5b6020020151901b95506002878161064257fe5b0496505b80806001019150506104fe565b508160006001811061066157fe5b602002015197507f6a82ba2aa1d2c039c41e6e2b5a5a1090d09906f060d32af9c1ac0beff7af75c06002548a8a60405180848152602001838152602001828152602001935050505060405180910390a160026000815480929190600101919050555087975050505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d21602e913960400191505060405180910390fd5b600061078382610468565b9050806027819055505050565b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b600080825190506002546001541161083d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610cfe6023913960400191505060405180910390fd5b60025460015403811115610886576000600254600154038203905060008090505b8181101561087a5760018551038552808060010191505061085e565b50600254600154039150505b6000806000806000610896610cdb565b60008060025490505b8860025401811015610a8e5760288b6002548303815181106108bd57fe5b6020026020010151901b95506001805482010396506108db81610c64565b9750600088141561092c5785600489602181106108f457fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c0217905550610a81565b6000600190505b888111610a3e5760006002898161094657fe5b0614156109ca576004600182036021811061095d57fe5b0160009054906101000a900460281b955086945060405186815285601b8201526020856036836002600019fa935083600081146109995761099b565bfe5b50506028846000600181106109ac57fe5b6020020151901b9650600260018903816109c257fe5b049750610a31565b869550600360009054906101000a900460281b945060405186815285601b8201526020856036836002600019fa93508360008114610a0757610a09565bfe5b5050602884600060018110610a1a57fe5b6020020151901b965060028881610a2d57fe5b0497505b8080600101915050610933565b508560048960218110610a4d57fe5b0160006101000a8154817affffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360281c02179055505b808060010191505061089f565b5060006001880190505b6000548111610ba557600060028881610aad57fe5b061415610b315760046001820360218110610ac457fe5b0160009054906101000a900460281b945085935060405185815284601b8201526020846036836002600019fa92508260008114610b0057610b02565bfe5b5050602883600060018110610b1357fe5b6020020151901b955060026001880381610b2957fe5b049650610b98565b859450600360009054906101000a900460281b935060405185815284601b8201526020846036836002600019fa92508260008114610b6e57610b70565bfe5b5050602883600060018110610b8157fe5b6020020151901b955060028781610b9457fe5b0496505b8080600101915050610a98565b5081600060018110610bb357fe5b602002015198507f8ec50f97970775682a68d3c6f9caedf60fd82448ea40706b8b65d6c03648b9226002548b8b6040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c2f578082015181840152602081019050610c14565b5050505090500194505050505060405180910390a1876002600082825401925050819055508898505050505050505050919050565b6000809050600160028381610c7557fe5b061415610cd6576000600190506000600290506000600182901b90505b6000841415610cd25760008183600188010381610cab57fe5b061415610cba57829350610ccd565b809150600181901b905082806001019350505b610c92565b5050505b919050565b604051806020016040528060019060208202803883398082019150509050509056fe5468657265206973206e6f207370616365206c65667420696e2074686520747265652e596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a72305820cc4c1277ac39590b47cbba4ed966767a1299d448c4adbb6829bcc8f3f2e8bb040029",
  "sourceMap": "243:1668:2:-;;;2127:2:0;2102:27;;2164:10;;2159:1;:15;2135:39;;2784:56;2769:71;;;;;;;;;;;;;;;;;;;;;;1174:56:2;8:9:-1;5:2;;;30:1;27;20:12;5:2;1174:56:2;1213:10;1205:5;;:18;;;;;;;;;;;;;;;;;;243:1668;;;;;;",
  "deployedSourceMap": "243:1668:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;243:1668:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2102:27:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1683:226:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1683:226:2;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1683:226:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1683:226:2;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1683:226:2;;;;;;;;;;;;:::i;:::-;;2199:24:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4197:4257;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4197:4257:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1350:209:2;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1350:209:2;;;;;;;;;;;;;;;;;:::i;:::-;;2135:39:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;295:20:2;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;428:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;428:40:2;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;613:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8760:7228:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8760:7228:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;8760:7228:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;8760:7228:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;8760:7228:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;8760:7228:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2102:27;;;;:::o;1683:226:2:-;1016:5;;;;;;;;;;;1002:19;;:10;:19;;;994:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1767:12;1782:24;1795:10;;1782:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1782:24:2;;;;;;:12;:24::i;:::-;1767:39;;1898:4;1885:10;:17;;;;1082:1;1683:226;;:::o;2199:24:0:-;;;;:::o;4197:4257::-;4252:12;4345:9;;4333;;:21;4325:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4405:9;4417:26;4433:9;;4417:15;:26::i;:::-;4405:38;;4453:14;4494:1;4482:9;;4470;;:21;:25;4453:42;;4505:17;4546:2;4533:9;:15;;4505:44;;4670:17;4697:18;4725:24;;:::i;:::-;4790:12;4818:10;4831:1;4818:14;;4813:3328;4842:10;;4834:5;:18;4813:3328;;;4891:4;4882:5;:13;4878:45;;;4914:9;4897:8;4906:4;4897:14;;;;;;;;;:26;;;;;;;;;;;;;;;;;;4878:45;4959:1;4954;4942:9;:13;;;;;;:18;4938:3193;;;5026:8;5035:5;5026:15;;;;;;;;;;;;;;;;;;5014:27;;5072:9;5059:22;;6326:4;6320:11;6428:9;6421:5;6414:24;6504:10;6497:4;6490:5;6486:16;6479:36;6638:4;6630:6;6624:4;6617:5;6614:1;6610;6606:6;6595:48;6584:59;;6736:7;6749:1;6744:20;;;;6729:35;;6744:20;6753:9;6729:35;;6247:535;6833:2;6820:6;6827:1;6820:9;;;;;;;;;;;:15;;6800:36;;6952:1;6947;6935:9;:13;6934:19;;;;;;6922:31;;4938:3193;;;7165:9;7153:21;;7205:4;;;;;;;;;;;7192:17;;7367:4;7361:11;7469:9;7462:5;7455:24;7545:10;7538:4;7531:5;7527:16;7520:36;7679:4;7671:6;7665:4;7658:5;7655:1;7651;7647:6;7636:48;7625:59;;7777:7;7790:1;7785:20;;;;7770:35;;7785:20;7794:9;7770:35;;7288:535;7874:2;7861:6;7868:1;7861:9;;;;;;;;;;;:15;;7841:36;;7987:1;7975:9;:13;;;;;;7963:25;;4938:3193;4854:7;;;;;;;4813:3328;;;;8158:6;8165:1;8158:9;;;;;;;;;;;8151:16;;8183:35;8191:9;;8202;8213:4;8183:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8306:9;;:11;;;;;;;;;;;;;8420:4;8413:11;;;;;;;;;4197:4257;;;:::o;1350:209:2:-;1016:5;;;;;;;;;;;1002:19;;:10;:19;;;994:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1420:12;1435:21;1446:9;1435:10;:21::i;:::-;1420:36;;1548:4;1535:10;:17;;;;1082:1;1350:209;:::o;2135:39:0:-;;;;:::o;295:20:2:-;;;;;;;;;;;;;:::o;428:40::-;;;;;;;;;;;;;;;;;:::o;613:25::-;;;;:::o;8760:7228:0:-;8827:12;8851:19;8873:10;:17;8851:39;;8969:9;;8957;;:21;8949:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9061:9;;9049;;:21;9032:14;:38;9028:728;;;9086:25;9144:9;;9132;;:21;9114:14;:40;9086:68;;9274:7;9284:1;9274:11;;9269:425;9292:20;9287:2;:25;9269:425;;;9659:1;9646:10;9640:17;9636:25;9624:10;9617:45;9314:4;;;;;;;9269:425;;;;9736:9;;9724;;:21;9707:38;;9028:728;;9766:9;9785:14;9809:17;9837;9864:18;9892:24;;:::i;:::-;9952:12;10043:14;10060:9;;10043:26;;10038:3166;10095:14;10083:9;;:26;10071:9;:38;10038:3166;;;10195:2;10158:10;10181:9;;10169;:21;10158:33;;;;;;;;;;;;;;:39;;10138:60;;10248:1;10236:9;;10224;:21;:25;10212:37;;10311:26;10327:9;10311:15;:26::i;:::-;10304:33;;10431:1;10423:4;:9;10419:121;;;10469:9;10452:8;10461:4;10452:14;;;;;;;;;:26;;;;;;;;;;;;;;;;;;10517:8;;10419:121;10645:10;10658:1;10645:14;;10640:2493;10670:4;10661:5;:13;10640:2493;;10724:1;10719;10707:9;:13;;;;;;:18;10703:2416;;;10799:8;10816:1;10808:5;:9;10799:19;;;;;;;;;;;;;;;;;;10787:31;;10853:9;10840:22;;11153:4;11147:11;11259:9;11252:5;11245:24;11339:10;11332:4;11325:5;11321:16;11314:36;11477:4;11469:6;11463:4;11456:5;11453:1;11449;11445:6;11434:48;11423:59;;11583:7;11596:1;11591:20;;;;11576:35;;11591:20;11600:9;11576:35;;11066:567;11799:2;11786:6;11793:1;11786:9;;;;;;;;;;;:15;;11766:36;;11922:1;11917;11905:9;:13;11904:19;;;;;;11892:31;;10703:2416;;;12047:9;12035:21;;12091:4;;;;;;;;;;;12078:17;;12268:4;12262:11;12374:9;12367:5;12360:24;12454:10;12447:4;12440:5;12436:16;12429:36;12592:4;12584:6;12578:4;12571:5;12568:1;12564;12560:6;12549:48;12538:59;;12698:7;12711:1;12706:20;;;;12691:35;;12706:20;12715:9;12691:35;;12181:567;12914:2;12901:6;12908:1;12901:9;;;;;;;;;;;:15;;12881:36;;13031:1;13019:9;:13;;;;;;13007:25;;10703:2416;10676:7;;;;;;;10640:2493;;;;13163:9;13146:8;13155:4;13146:14;;;;;;;;;:26;;;;;;;;;;;;;;;;;;10038:3166;10111:11;;;;;;;10038:3166;;;;13374:10;13394:1;13387:4;:8;13374:21;;13369:2287;13406:10;;13397:5;:19;13369:2287;;13463:1;13458;13446:9;:13;;;;;;:18;13442:2204;;;13530:8;13547:1;13539:5;:9;13530:19;;;;;;;;;;;;;;;;;;13518:31;;13580:9;13567:22;;13746:4;13740:11;13848:9;13841:5;13834:24;13924:10;13917:4;13910:5;13906:16;13899:36;14058:4;14050:6;14044:4;14037:5;14034:1;14030;14026:6;14015:48;14004:59;;14156:7;14169:1;14164:20;;;;14149:35;;14164:20;14173:9;14149:35;;13667:535;14360:2;14347:6;14354:1;14347:9;;;;;;;;;;;:15;;14327:36;;14479:1;14474;14462:9;:13;14461:19;;;;;;14449:31;;13442:2204;;;14633:9;14621:21;;14673:4;;;;;;;;;;;14660:17;;14834:4;14828:11;14936:9;14929:5;14922:24;15012:10;15005:4;14998:5;14994:16;14987:36;15146:4;15138:6;15132:4;15125:5;15122:1;15118;15114:6;15103:48;15092:59;;15244:7;15257:1;15252:20;;;;15237:35;;15252:20;15261:9;15237:35;;14755:535;15448:2;15435:6;15442:1;15435:9;;;;;;;;;;;:15;;15415:36;;15561:1;15549:9;:13;;;;;;15537:25;;13442:2204;13418:7;;;;;;;13369:2287;;;;15673:6;15680:1;15673:9;;;;;;;;;;;15666:16;;15698:38;15708:9;;15719:10;15731:4;15698:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;15698:38:0;;;;;;;;;;;;;;;;;;;15837:14;15824:9;;:27;;;;;;;;;;;15954:4;15947:11;;;;;;;;;;8760:7228;;;:::o;3405:515::-;3468:9;3496:1;3489:8;;3529:1;3524;3512:9;:13;;;;;;:18;3507:407;;;3547:9;3559:1;3547:13;;3574:9;3586:1;3574:13;;3601:9;3621:1;3613:4;:9;;3601:21;;3636:268;3651:1;3643:4;:9;3636:268;;;3710:1;3702:4;3694;3690:1;3678:9;:13;:20;3677:29;;;;;;:34;3672:218;;;3743:4;3736:11;;3672:218;;;3801:4;3794:11;;3842:1;3834:4;:9;;3827:16;;3865:6;;;;;;;3672:218;3636:268;;;3507:407;;;;3405:515;;;:::o;243:1668:2:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;243:1668:2;;;;:::o",
  "source": "/**\nContract to manage permissions to update the leaves of the imported MerkleTree contract (which is the base contract which handles tree inserts and updates).\n\n@Author iAmMichaelConnor\n*/\npragma solidity ^0.5.8;\n\nimport \"./MerkleTree.sol\";\n\ncontract MerkleTreeController2 is MerkleTree {\n\n    address public owner; // We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n\n    mapping(bytes32 => bytes32) public roots; // Example of a way to hold every root that's been calculated by this contract. This isn't actually used by this simple example-contract.\n\n    bytes32 public latestRoot; // Example of a way to hold the latest root so that users can retrieve it. This isn't actually used by this simple example-contract.\n\n    /**\n    We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n    @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not authorised to invoke this function\");\n        _;\n    }\n\n    /**\n    @notice Constructor for the MerkleTreeController contract.\n    */\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    @notice Append a leaf to the tree\n    @param leafValue - the value of the leaf being inserted.\n    */\n    function _insertLeaf(bytes32 leafValue) external onlyOwner {\n\n        bytes32 root = insertLeaf(leafValue); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n\n    /**\n    @notice Append leaves to the tree\n    @param leafValues - the values of the leaves being inserted.\n    */\n    function _insertLeaves(bytes32[] calldata leafValues) external onlyOwner {\n\n        bytes32 root = insertLeaves(leafValues); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n}\n",
  "sourcePath": "/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTreeController2.sol",
  "ast": {
    "absolutePath": "/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTreeController2.sol",
    "exportedSymbols": {
      "MerkleTreeController2": [
        714
      ]
    },
    "id": 715,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 644,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:2"
      },
      {
        "absolutePath": "/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTree.sol",
        "file": "./MerkleTree.sol",
        "id": 645,
        "nodeType": "ImportDirective",
        "scope": 715,
        "sourceUnit": 571,
        "src": "215:26:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 646,
              "name": "MerkleTree",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 570,
              "src": "277:10:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTree_$570",
                "typeString": "contract MerkleTree"
              }
            },
            "id": 647,
            "nodeType": "InheritanceSpecifier",
            "src": "277:10:2"
          }
        ],
        "contractDependencies": [
          570
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 714,
        "linearizedBaseContracts": [
          714,
          570
        ],
        "name": "MerkleTreeController2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 649,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 714,
            "src": "295:20:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 648,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "295:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 653,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 714,
            "src": "428:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 652,
              "keyType": {
                "id": 650,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "436:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "428:27:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 651,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "447:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 655,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 714,
            "src": "613:25:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 654,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "613:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 666,
              "nodeType": "Block",
              "src": "984:106:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 661,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 658,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 729,
                            "src": "1002:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 659,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1002:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 660,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 649,
                          "src": "1016:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1002:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 662,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1023:48:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 657,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        732,
                        733
                      ],
                      "referencedDeclaration": 733,
                      "src": "994:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "994:78:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 664,
                  "nodeType": "ExpressionStatement",
                  "src": "994:78:2"
                },
                {
                  "id": 665,
                  "nodeType": "PlaceholderStatement",
                  "src": "1082:1:2"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 667,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 656,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "981:2:2"
            },
            "src": "963:127:2",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 675,
              "nodeType": "Block",
              "src": "1195:35:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 670,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 649,
                      "src": "1205:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 671,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 729,
                        "src": "1213:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 672,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1213:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1205:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 674,
                  "nodeType": "ExpressionStatement",
                  "src": "1205:18:2"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 676,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 668,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1185:2:2"
            },
            "returnParameters": {
              "id": 669,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1195:0:2"
            },
            "scope": 714,
            "src": "1174:56:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 693,
              "nodeType": "Block",
              "src": "1409:150:2",
              "statements": [
                {
                  "assignments": [
                    684
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 684,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 693,
                      "src": "1420:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 683,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1420:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 688,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 686,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 678,
                        "src": "1446:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 685,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 257,
                      "src": "1435:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 687,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1435:21:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1420:36:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 689,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 655,
                      "src": "1535:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 690,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 684,
                      "src": "1548:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1535:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 692,
                  "nodeType": "ExpressionStatement",
                  "src": "1535:17:2"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 694,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 681,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 680,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 667,
                  "src": "1399:9:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1399:9:2"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 679,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 678,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "1371:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 677,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1371:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1370:19:2"
            },
            "returnParameters": {
              "id": 682,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1409:0:2"
            },
            "scope": 714,
            "src": "1350:209:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 712,
              "nodeType": "Block",
              "src": "1756:153:2",
              "statements": [
                {
                  "assignments": [
                    703
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 703,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 712,
                      "src": "1767:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 702,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1767:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 707,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 705,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 697,
                        "src": "1795:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 704,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 569,
                      "src": "1782:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 706,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1782:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1767:39:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 710,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 708,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 655,
                      "src": "1885:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 709,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 703,
                      "src": "1898:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1885:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 711,
                  "nodeType": "ExpressionStatement",
                  "src": "1885:17:2"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 713,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 700,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 699,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 667,
                  "src": "1746:9:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1746:9:2"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 698,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 697,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 713,
                  "src": "1706:29:2",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 695,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1706:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 696,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1706:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1705:31:2"
            },
            "returnParameters": {
              "id": 701,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1756:0:2"
            },
            "scope": 714,
            "src": "1683:226:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 715,
        "src": "243:1668:2"
      }
    ],
    "src": "190:1722:2"
  },
  "legacyAST": {
    "absolutePath": "/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTreeController2.sol",
    "exportedSymbols": {
      "MerkleTreeController2": [
        714
      ]
    },
    "id": 715,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 644,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:2"
      },
      {
        "absolutePath": "/Users/em137vl/git/nightfall-merkle-tree/nightfall/merkle-tree/deployer/contracts/MerkleTree.sol",
        "file": "./MerkleTree.sol",
        "id": 645,
        "nodeType": "ImportDirective",
        "scope": 715,
        "sourceUnit": 571,
        "src": "215:26:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 646,
              "name": "MerkleTree",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 570,
              "src": "277:10:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTree_$570",
                "typeString": "contract MerkleTree"
              }
            },
            "id": 647,
            "nodeType": "InheritanceSpecifier",
            "src": "277:10:2"
          }
        ],
        "contractDependencies": [
          570
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 714,
        "linearizedBaseContracts": [
          714,
          570
        ],
        "name": "MerkleTreeController2",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 649,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 714,
            "src": "295:20:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 648,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "295:7:2",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 653,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 714,
            "src": "428:40:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 652,
              "keyType": {
                "id": 650,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "436:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "428:27:2",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 651,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "447:7:2",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 655,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 714,
            "src": "613:25:2",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 654,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "613:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 666,
              "nodeType": "Block",
              "src": "984:106:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 661,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 658,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 729,
                            "src": "1002:3:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 659,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1002:10:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 660,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 649,
                          "src": "1016:5:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1002:19:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 662,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1023:48:2",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 657,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        732,
                        733
                      ],
                      "referencedDeclaration": 733,
                      "src": "994:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "994:78:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 664,
                  "nodeType": "ExpressionStatement",
                  "src": "994:78:2"
                },
                {
                  "id": 665,
                  "nodeType": "PlaceholderStatement",
                  "src": "1082:1:2"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 667,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 656,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "981:2:2"
            },
            "src": "963:127:2",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 675,
              "nodeType": "Block",
              "src": "1195:35:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 673,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 670,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 649,
                      "src": "1205:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 671,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 729,
                        "src": "1213:3:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 672,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1213:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1205:18:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 674,
                  "nodeType": "ExpressionStatement",
                  "src": "1205:18:2"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.",
            "id": 676,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 668,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1185:2:2"
            },
            "returnParameters": {
              "id": 669,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1195:0:2"
            },
            "scope": 714,
            "src": "1174:56:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 693,
              "nodeType": "Block",
              "src": "1409:150:2",
              "statements": [
                {
                  "assignments": [
                    684
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 684,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 693,
                      "src": "1420:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 683,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1420:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 688,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 686,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 678,
                        "src": "1446:9:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 685,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 257,
                      "src": "1435:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 687,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1435:21:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1420:36:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 691,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 689,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 655,
                      "src": "1535:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 690,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 684,
                      "src": "1548:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1535:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 692,
                  "nodeType": "ExpressionStatement",
                  "src": "1535:17:2"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 694,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 681,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 680,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 667,
                  "src": "1399:9:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1399:9:2"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 679,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 678,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 694,
                  "src": "1371:17:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 677,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1371:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1370:19:2"
            },
            "returnParameters": {
              "id": 682,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1409:0:2"
            },
            "scope": 714,
            "src": "1350:209:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 712,
              "nodeType": "Block",
              "src": "1756:153:2",
              "statements": [
                {
                  "assignments": [
                    703
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 703,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 712,
                      "src": "1767:12:2",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 702,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1767:7:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 707,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 705,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 697,
                        "src": "1795:10:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 704,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 569,
                      "src": "1782:12:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 706,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1782:24:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1767:39:2"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 710,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 708,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 655,
                      "src": "1885:10:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 709,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 703,
                      "src": "1898:4:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1885:17:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 711,
                  "nodeType": "ExpressionStatement",
                  "src": "1885:17:2"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 713,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 700,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 699,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 667,
                  "src": "1746:9:2",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1746:9:2"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 698,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 697,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 713,
                  "src": "1706:29:2",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 695,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1706:7:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 696,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1706:9:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1705:31:2"
            },
            "returnParameters": {
              "id": 701,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1756:0:2"
            },
            "scope": 714,
            "src": "1683:226:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 715,
        "src": "243:1668:2"
      }
    ],
    "src": "190:1722:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-11-22T15:45:18.463Z",
  "devdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        }
      },
      "_insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        }
      },
      "insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        },
        "return": "bytes32 - the root of the merkle tree, after the insert."
      },
      "insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        },
        "return": "bytes32[] - the root of the merkle tree, after all the inserts."
      }
    }
  },
  "userdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "notice": "Append a leaf to the tree"
      },
      "_insertLeaves(bytes32[])": {
        "notice": "Append leaves to the tree"
      },
      "constructor": "Constructor for the MerkleTreeController contract.",
      "insertLeaf(bytes32)": {
        "notice": "Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier."
      },
      "insertLeaves(bytes32[])": {
        "notice": "Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier."
      }
    }
  }
}