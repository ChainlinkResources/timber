{
  "contractName": "MerkleTreeController",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "treeHeight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "valuesToConvertToLeafValues",
          "type": "uint256[25]"
        }
      ],
      "name": "bytes32ArrayEncoder",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "leafCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "valueToConvertToLeafValue",
          "type": "uint256"
        }
      ],
      "name": "bytes32Encoder",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "insertLeaf",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treeWidth",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "latestRoot",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "insertLeaves",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_treeHeight",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "newLeaf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minLeafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValues",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "newLeaves",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "_insertLeaf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "_insertLeaves",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"treeHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"_insertLeaves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valuesToConvertToLeafValues\",\"type\":\"uint256[25]\"}],\"name\":\"bytes32ArrayEncoder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueToConvertToLeafValue\",\"type\":\"uint256\"}],\"name\":\"bytes32Encoder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"insertLeaf\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"_insertLeaf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treeWidth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"insertLeaves\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_treeHeight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"newLeaf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minLeafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValues\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"newLeaves\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"notice\":\"Append a leaf to the tree\"},\"_insertLeaves(bytes32[])\":{\"notice\":\"Append leaves to the tree\"},\"constructor\":\"Constructor for the MerkleTreeController contract. We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \\\"modifier\\\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \\\"modifier\\\" directly below):\"}}},\"settings\":{\"compilationTarget\":{\"/Users/em137vl/git/merkle/deployer/contracts/MerkleTreeController.sol\":\"MerkleTreeController\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/em137vl/git/merkle/deployer/contracts/MerkleTree.sol\":{\"keccak256\":\"0xc38c81abc35c3f31f5fb4d8a85c1ba5d4efc0933d6402ed5811686d04d4a0833\",\"urls\":[\"bzzr://0438aff02c4fff913be2806ecf83e3b98fffc5f8fb01e8959f7349b2a1dc7a5a\"]},\"/Users/em137vl/git/merkle/deployer/contracts/MerkleTreeController.sol\":{\"keccak256\":\"0x1e296955366b1e040276c7040c14a56229b9c661ffc2d03dca9e948c9b8f5804\",\"urls\":[\"bzzr://ea991c5580bc042ac5591e67700b47b6d395f009ffd4eb4c510192e3a7d5bb2b\"]}},\"version\":1}",
  "bytecode": "0x60806040526000801b60005534801561001757600080fd5b50604051602080610e3d8339810180604052602081101561003757600080fd5b810190808051906020019092919050505080806001819055508060020a6002819055505033602560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610d91806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806371b625411161007157806371b625411461026d57806376c601b11461029b5780638da5cb5b146102b9578063ae6dead714610303578063d7b0fef114610345578063dc52bf9f14610363576100b4565b806301e3e915146100b957806303ebd1d4146100d7578063226ae84a1461015057806330e69fc3146101cb5780634b6e4222146101e95780635c8b80ab1461022b575b600080fd5b6100c161042f565b6040518082815260200191505060405180910390f35b61014e600480360360208110156100ed57600080fd5b810190808035906020019064010000000081111561010a57600080fd5b82018360208201111561011c57600080fd5b8035906020019184602083028401116401000000008311171561013e57600080fd5b9091929391929390505050610435565b005b6101b5600480360361032081101561016757600080fd5b810190808061032001906019806020026040519081016040528092919082601960200280828437600081840152601f19601f820116905080830192505050505050919291929050505061052e565b6040518082815260200191505060405180910390f35b6101d36105bf565b6040518082815260200191505060405180910390f35b610215600480360360208110156101ff57600080fd5b81019080803590602001909291905050506105c5565b6040518082815260200191505060405180910390f35b6102576004803603602081101561024157600080fd5b81019080803590602001909291905050506105df565b6040518082815260200191505060405180910390f35b6102996004803603602081101561028357600080fd5b81019080803590602001909291905050506107c2565b005b6102a3610879565b6040518082815260200191505060405180910390f35b6102c161087f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61032f6004803603602081101561031957600080fd5b81019080803590602001909291905050506108a5565b6040518082815260200191505060405180910390f35b61034d6108bd565b6040518082815260200191505060405180910390f35b6104196004803603602081101561037957600080fd5b810190808035906020019064010000000081111561039657600080fd5b8201836020820111156103a857600080fd5b803590602001918460208302840111640100000000831117156103ca57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506108c3565b6040518082815260200191505060405180910390f35b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d38602e913960400191505060405180910390fd5b6000610527838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506108c3565b9050505050565b6000606060196040519080825280602002602001820160405280156105625781602001602082028038833980820191505090505b50905060008090505b60198110156105ad5783816019811061058057fe5b602002015160001b82828151811061059457fe5b602002602001018181525050808060010191505061056b565b506105b7816108c3565b915050919050565b60245481565b6000808260001b90506105d7816105df565b915050919050565b6000806105ed602454610c7c565b9050600060028054602454010390506000849050610609610cf3565b610611610d15565b600080600090505b600154811015610758578681141561063f57846003886021811061063957fe5b01819055505b60006002878161064b57fe5b0614156106d8576003816021811061065f57fe5b01548460006002811061066e57fe5b602002018181525050848460016002811061068557fe5b60200201818152505060208360408660006002600019f1915081600081146106ac576106ae565bfe5b50826000600181106106bc57fe5b60200201519450600260018703816106d057fe5b04955061074b565b84846000600281106106e657fe5b602002018181525050600054846001600281106106ff57fe5b60200201818152505060208360408660006002600019f19150816000811461072657610728565bfe5b508260006001811061073657fe5b602002015194506002868161074757fe5b0495505b8080600101915050610619565b507f961d75dfa6cbcadcc3eb9732500ab98db65e36ae3ebe7f32daa7b1c37dc731b1602454898660405180848152602001838152602001828152602001935050505060405180910390a1602460008154809291906001019190505550839650505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d38602e913960400191505060405180910390fd5b6000610873826105df565b90505050565b60025481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b60008082519050602454600254038111156108e2576024546002540390505b60008060006108ef610cf3565b6108f7610d15565b60008060245490505b87811015610aa3578960245482038151811061091857fe5b6020026020010151945061092b81610c7c565b9650600087141561094e57846003886021811061094457fe5b0181905550610a96565b6002805482010395506000600190505b878111610a815760006002888161097157fe5b061415610a01576003600182036021811061098857fe5b01548560006002811061099757fe5b60200201818152505085856001600281106109ae57fe5b60200201818152505060208460408760006002600019f1925082600081146109d5576109d7565bfe5b50836000600181106109e557fe5b60200201519550600260018803816109f957fe5b049650610a74565b8585600060028110610a0f57fe5b60200201818152505060005485600160028110610a2857fe5b60200201818152505060208460408760006002600019f192508260008114610a4f57610a51565bfe5b5083600060018110610a5f57fe5b6020020151955060028781610a7057fe5b0496505b808060010191505061095e565b508460038860218110610a9057fe5b01819055505b8080600101915050610900565b5060006001870190505b6001548111610bd257600060028781610ac257fe5b061415610b525760036001820360218110610ad957fe5b015484600060028110610ae857fe5b6020020181815250508484600160028110610aff57fe5b60200201818152505060208360408660006002600019f191508160008114610b2657610b28565bfe5b5082600060018110610b3657fe5b6020020151945060026001870381610b4a57fe5b049550610bc5565b8484600060028110610b6057fe5b60200201818152505060005484600160028110610b7957fe5b60200201818152505060208360408660006002600019f191508160008114610ba057610ba2565bfe5b5082600060018110610bb057fe5b6020020151945060028681610bc157fe5b0495505b8080600101915050610aad565b507f90804955ce158dc0821dd7cbb6eaa48ad3e31bd650e7ef7f7b819e525acdad136024548a866040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c48578082015181840152602081019050610c2d565b5050505090500194505050505060405180910390a18660246000828254019250508190555083975050505050505050919050565b6000809050600160028381610c8d57fe5b061415610cee576000600190506000600290506000600182901b90505b6000841415610cea5760008183600188010381610cc357fe5b061415610cd257829350610ce5565b809150600181901b905082806001019350505b610caa565b5050505b919050565b6040518060400160405280600290602082028038833980820191505090505090565b604051806020016040528060019060208202803883398082019150509050509056fe596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a723058208fb42b759078c015bf0b51b1791a6e3ae32ee8ad1c1a13b3b7f93a5ec079ee250029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806371b625411161007157806371b625411461026d57806376c601b11461029b5780638da5cb5b146102b9578063ae6dead714610303578063d7b0fef114610345578063dc52bf9f14610363576100b4565b806301e3e915146100b957806303ebd1d4146100d7578063226ae84a1461015057806330e69fc3146101cb5780634b6e4222146101e95780635c8b80ab1461022b575b600080fd5b6100c161042f565b6040518082815260200191505060405180910390f35b61014e600480360360208110156100ed57600080fd5b810190808035906020019064010000000081111561010a57600080fd5b82018360208201111561011c57600080fd5b8035906020019184602083028401116401000000008311171561013e57600080fd5b9091929391929390505050610435565b005b6101b5600480360361032081101561016757600080fd5b810190808061032001906019806020026040519081016040528092919082601960200280828437600081840152601f19601f820116905080830192505050505050919291929050505061052e565b6040518082815260200191505060405180910390f35b6101d36105bf565b6040518082815260200191505060405180910390f35b610215600480360360208110156101ff57600080fd5b81019080803590602001909291905050506105c5565b6040518082815260200191505060405180910390f35b6102576004803603602081101561024157600080fd5b81019080803590602001909291905050506105df565b6040518082815260200191505060405180910390f35b6102996004803603602081101561028357600080fd5b81019080803590602001909291905050506107c2565b005b6102a3610879565b6040518082815260200191505060405180910390f35b6102c161087f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61032f6004803603602081101561031957600080fd5b81019080803590602001909291905050506108a5565b6040518082815260200191505060405180910390f35b61034d6108bd565b6040518082815260200191505060405180910390f35b6104196004803603602081101561037957600080fd5b810190808035906020019064010000000081111561039657600080fd5b8201836020820111156103a857600080fd5b803590602001918460208302840111640100000000831117156103ca57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506108c3565b6040518082815260200191505060405180910390f35b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d38602e913960400191505060405180910390fd5b6000610527838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506108c3565b9050505050565b6000606060196040519080825280602002602001820160405280156105625781602001602082028038833980820191505090505b50905060008090505b60198110156105ad5783816019811061058057fe5b602002015160001b82828151811061059457fe5b602002602001018181525050808060010191505061056b565b506105b7816108c3565b915050919050565b60245481565b6000808260001b90506105d7816105df565b915050919050565b6000806105ed602454610c7c565b9050600060028054602454010390506000849050610609610cf3565b610611610d15565b600080600090505b600154811015610758578681141561063f57846003886021811061063957fe5b01819055505b60006002878161064b57fe5b0614156106d8576003816021811061065f57fe5b01548460006002811061066e57fe5b602002018181525050848460016002811061068557fe5b60200201818152505060208360408660006002600019f1915081600081146106ac576106ae565bfe5b50826000600181106106bc57fe5b60200201519450600260018703816106d057fe5b04955061074b565b84846000600281106106e657fe5b602002018181525050600054846001600281106106ff57fe5b60200201818152505060208360408660006002600019f19150816000811461072657610728565bfe5b508260006001811061073657fe5b602002015194506002868161074757fe5b0495505b8080600101915050610619565b507f961d75dfa6cbcadcc3eb9732500ab98db65e36ae3ebe7f32daa7b1c37dc731b1602454898660405180848152602001838152602001828152602001935050505060405180910390a1602460008154809291906001019190505550839650505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d38602e913960400191505060405180910390fd5b6000610873826105df565b90505050565b60025481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b60008082519050602454600254038111156108e2576024546002540390505b60008060006108ef610cf3565b6108f7610d15565b60008060245490505b87811015610aa3578960245482038151811061091857fe5b6020026020010151945061092b81610c7c565b9650600087141561094e57846003886021811061094457fe5b0181905550610a96565b6002805482010395506000600190505b878111610a815760006002888161097157fe5b061415610a01576003600182036021811061098857fe5b01548560006002811061099757fe5b60200201818152505085856001600281106109ae57fe5b60200201818152505060208460408760006002600019f1925082600081146109d5576109d7565bfe5b50836000600181106109e557fe5b60200201519550600260018803816109f957fe5b049650610a74565b8585600060028110610a0f57fe5b60200201818152505060005485600160028110610a2857fe5b60200201818152505060208460408760006002600019f192508260008114610a4f57610a51565bfe5b5083600060018110610a5f57fe5b6020020151955060028781610a7057fe5b0496505b808060010191505061095e565b508460038860218110610a9057fe5b01819055505b8080600101915050610900565b5060006001870190505b6001548111610bd257600060028781610ac257fe5b061415610b525760036001820360218110610ad957fe5b015484600060028110610ae857fe5b6020020181815250508484600160028110610aff57fe5b60200201818152505060208360408660006002600019f191508160008114610b2657610b28565bfe5b5082600060018110610b3657fe5b6020020151945060026001870381610b4a57fe5b049550610bc5565b8484600060028110610b6057fe5b60200201818152505060005484600160028110610b7957fe5b60200201818152505060208360408660006002600019f191508160008114610ba057610ba2565bfe5b5082600060018110610bb057fe5b6020020151945060028681610bc157fe5b0495505b8080600101915050610aad565b507f90804955ce158dc0821dd7cbb6eaa48ad3e31bd650e7ef7f7b819e525acdad136024548a866040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c48578082015181840152602081019050610c2d565b5050505090500194505050505060405180910390a18660246000828254019250508190555083975050505050505050919050565b6000809050600160028381610c8d57fe5b061415610cee576000600190506000600290506000600182901b90505b6000841415610cea5760008183600188010381610cc357fe5b061415610cd257829350610ce5565b809150600181901b905082806001019350505b610caa565b5050505b919050565b6040518060400160405280600290602082028038833980820191505090505090565b604051806020016040528060019060208202803883398082019150509050509056fe596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a723058208fb42b759078c015bf0b51b1791a6e3ae32ee8ad1c1a13b3b7f93a5ec079ee250029",
  "sourceMap": "187:1926:1:-;;;1818:66:0;1803:81;;;;1336:96:1;8:9:-1;5:2;;;30:1;27;20:12;5:2;1336:96:1;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1336:96:1;;;;;;;;;;;;;;;;1377:11;2312::0;2299:10;:24;;;;2350:11;2345:1;:16;2333:9;:28;;;;2252:169;1415:10:1;1407:5;;:18;;;;;;;;;;;;;;;;;;1336:96;187:1926;;;;;;",
  "deployedSourceMap": "187:1926:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;187:1926:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1890:22:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1814:297:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1814:297:1;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;1814:297:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;1814:297:1;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;1814:297:1;;;;;;;;;;;;:::i;:::-;;10227:355:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;10227:355:0;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;10227:355:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2175:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;9927:190;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9927:190:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2951:2340;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2951:2340:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1483:280:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1483:280:1;;;;;;;;;;;;;;;;;:::i;:::-;;1918:21:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;238:20:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;371:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;371:40:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;556:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5300:4590:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5300:4590:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;5300:4590:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5300:4590:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;5300:4590:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;5300:4590:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1890:22;;;;:::o;1814:297:1:-;959:5;;;;;;;;;;;945:19;;:10;:19;;;937:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1898:12;1913:24;1926:10;;1913:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1913:24:1;;;;;;:12;:24::i;:::-;1898:39;;1025:1;1814:297;;:::o;10227:355:0:-;10317:7;10336:27;10380:2;10366:17;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;10366:17:0;;;;10336:47;;10398:6;10407:1;10398:10;;10393:142;10414:34;10410:1;:38;10393:142;;;10493:27;10521:1;10493:30;;;;;;;;;;;10485:39;;10469:10;10480:1;10469:13;;;;;;;;;;;;;:55;;;;;10450:3;;;;;;;10393:142;;;;10551:24;10564:10;10551:12;:24::i;:::-;10544:31;;;10227:355;;;:::o;2175:24::-;;;;:::o;9927:190::-;9999:7;10018:17;10046:25;10038:34;;10018:54;;10089:21;10100:9;10089:10;:21::i;:::-;10082:28;;;9927:190;;;:::o;2951:2340::-;3006:7;3026:9;3038:26;3054:9;;3038:15;:26::i;:::-;3026:38;;3074:14;3115:1;3103:9;;3091;;:21;:25;3074:42;;3126:17;3146:9;3126:29;;3276:24;;:::i;:::-;3361;;:::i;:::-;3395:12;3424:10;3437:1;3424:14;;3419:1420;3448:10;;3440:5;:18;3419:1420;;;3497:4;3488:5;:13;3484:45;;;3520:9;3503:8;3512:4;3503:14;;;;;;;;:26;;;;3484:45;3565:1;3560;3548:9;:13;;;;;;:18;3544:1285;;;3632:8;3641:5;3632:15;;;;;;;;;3620:6;3627:1;3620:9;;;;;;;;;;:27;;;;;3677:9;3665:6;3672:1;3665:9;;;;;;;;;;:21;;;;;3952:4;3944:6;3938:4;3930:6;3927:1;3924;3920;3916:6;3911:46;3900:57;;4050:7;4063:1;4058:20;;;;4043:35;;4058:20;4067:9;4043:35;;4125:6;4132:1;4125:9;;;;;;;;;;;4113:21;;4250:1;4245;4233:9;:13;4232:19;;;;;;4220:31;;3544:1285;;;4363:9;4351:6;4358:1;4351:9;;;;;;;;;;:21;;;;;4402:4;;4390:6;4397:1;4390:9;;;;;;;;;;:16;;;;;4558:4;4550:6;4544:4;4536:6;4533:1;4530;4526;4522:6;4517:46;4506:57;;4591:7;4604:1;4599:20;;;;4584:35;;4599:20;4608:9;4584:35;;4666:6;4673:1;4666:9;;;;;;;;;;;4654:21;;4785:1;4773:9;:13;;;;;;4761:25;;3544:1285;3460:7;;;;;;;3419:1420;;;;5010:40;5018:9;;5029;5040;5010:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5138:9;;:11;;;;;;;;;;;;;5252:9;5245:16;;;;;;;;2951:2340;;;:::o;1483:280:1:-;959:5;;;;;;;;;;;945:19;;:10;:19;;;937:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1553:12;1568:21;1579:9;1568:10;:21::i;:::-;1553:36;;1025:1;1483:280;:::o;1918:21:0:-;;;;:::o;238:20:1:-;;;;;;;;;;;;;:::o;371:40::-;;;;;;;;;;;;;;;;;:::o;556:25::-;;;;:::o;5300:4590:0:-;5367:7;5386:19;5408:10;:17;5386:39;;5517:9;;5505;;:21;5488:14;:38;5483:142;;;5572:9;;5560;;:21;5543:38;;5483:142;5635:9;5654:14;5678:17;5706:24;;:::i;:::-;5791;;:::i;:::-;5851:12;5942:14;5959:9;;5942:26;;5937:2149;5982:14;5970:9;:26;5937:2149;;;6037:10;6060:9;;6048;:21;6037:33;;;;;;;;;;;;;;6025:45;;6092:26;6108:9;6092:15;:26::i;:::-;6085:33;;6212:1;6204:4;:9;6200:121;;;6250:9;6233:8;6242:4;6233:14;;;;;;;;:26;;;;6298:8;;6200:121;6371:1;6359:9;;6347;:21;:25;6335:37;;6518:10;6531:1;6518:14;;6513:1502;6543:4;6534:5;:13;6513:1502;;6597:1;6592;6580:9;:13;;;;;;:18;6576:1425;;;6672:8;6689:1;6681:5;:9;6672:19;;;;;;;;;6660:6;6667:1;6660:9;;;;;;;;;;:31;;;;;6725:9;6713:6;6720:1;6713:9;;;;;;;;;;:21;;;;;7016:4;7008:6;7002:4;6994:6;6991:1;6988;6984;6980:6;6975:46;6964:57;;7122:7;7135:1;7130:20;;;;7115:35;;7130:20;7139:9;7115:35;;7205:6;7212:1;7205:9;;;;;;;;;;;7193:21;;7334:1;7329;7317:9;:13;7316:19;;;;;;7304:31;;6576:1425;;;7459:9;7447:6;7454:1;7447:9;;;;;;;;;;:21;;;;;7502:4;;7490:6;7497:1;7490:9;;;;;;;;;;:16;;;;;7670:4;7662:6;7656:4;7648:6;7645:1;7642;7638;7634:6;7629:46;7618:57;;7707:7;7720:1;7715:20;;;;7700:35;;7715:20;7724:9;7700:35;;7790:6;7797:1;7790:9;;;;;;;;;;;7778:21;;7913:1;7901:9;:13;;;;;;7889:25;;6576:1425;6549:7;;;;;;;6513:1502;;;;8045:9;8028:8;8037:4;8028:14;;;;;;;;:26;;;;5937:2149;5998:11;;;;;;;5937:2149;;;;8256:10;8276:1;8269:4;:8;8256:21;;8251:1275;8288:10;;8279:5;:19;8251:1275;;8345:1;8340;8328:9;:13;;;;;;:18;8324:1192;;;8412:8;8429:1;8421:5;:9;8412:19;;;;;;;;;8400:6;8407:1;8400:9;;;;;;;;;;:31;;;;;8461:9;8449:6;8456:1;8449:9;;;;;;;;;;:21;;;;;8622:4;8614:6;8608:4;8600:6;8597:1;8594;8590;8586:6;8581:46;8570:57;;8655:7;8668:1;8663:20;;;;8648:35;;8663:20;8672:9;8648:35;;8730:6;8737:1;8730:9;;;;;;;;;;;8718:21;;8855:1;8850;8838:9;:13;8837:19;;;;;;8825:31;;8324:1192;;;9009:9;8997:6;9004:1;8997:9;;;;;;;;;;:21;;;;;9048:4;;9036:6;9043:1;9036:9;;;;;;;;;;:16;;;;;9204:4;9196:6;9190:4;9182:6;9179:1;9176;9172;9168:6;9163:46;9152:57;;9237:7;9250:1;9245:20;;;;9230:35;;9245:20;9254:9;9230:35;;9312:6;9319:1;9312:9;;;;;;;;;;;9300:21;;9431:1;9419:9;:13;;;;;;9407:25;;8324:1192;8300:7;;;;;;;8251:1275;;;;9590:43;9600:9;;9611:10;9623:9;9590:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9590:43:0;;;;;;;;;;;;;;;;;;;9734:14;9721:9;;:27;;;;;;;;;;;9851:9;9844:16;;;;;;;;;5300:4590;;;:::o;2427:516::-;2491:9;2519:1;2512:8;;2552:1;2547;2535:9;:13;;;;;;:18;2530:407;;;2570:9;2582:1;2570:13;;2597:9;2609:1;2597:13;;2624:9;2644:1;2636:4;:9;;2624:21;;2659:268;2674:1;2666:4;:9;2659:268;;;2733:1;2725:4;2717;2713:1;2701:9;:13;:20;2700:29;;;;;;:34;2695:218;;;2766:4;2759:11;;2695:218;;;2824:4;2817:11;;2865:1;2857:4;:9;;2850:16;;2888:6;;;;;;;2695:218;2659:268;;;2530:407;;;;2427:516;;;:::o;187:1926:1:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;187:1926:1;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;187:1926:1;;;;:::o",
  "source": "/**\nContract to enable the management of hidden non fungible toke transactions.\n@Author Westlad, Chaitanya-Konda, iAmMichaelConnor\n*/\npragma solidity ^0.5.8;\n\nimport \"./MerkleTree.sol\";\n\ncontract MerkleTreeController is MerkleTree {\n\n    address public owner; // We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n\n    mapping(bytes32 => bytes32) public roots; // Example of a way to hold every root that's been calculated by this contract. This isn't actually used by this simple example-contract.\n\n    bytes32 public latestRoot; // Example of a way to hold the latest root so that users can retrieve it. This isn't actually used by this simple example-contract.\n\n    /**\n    We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n    @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not authorised to invoke this function\");\n        _;\n    }\n\n    /**\n    Constructor for the MerkleTreeController contract. We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below):\n    */\n    constructor(uint _treeHeight) MerkleTree(_treeHeight) public {\n        owner = msg.sender;\n    }\n\n    /**\n    Append a leaf to the tree\n    */\n    function _insertLeaf(bytes32 leafValue) external onlyOwner {\n\n        bytes32 root = insertLeaf(leafValue); // recalculate the root of the tree\n\n        // emit newLeaf(leafCount, leafValue, root); // this event is what the merkle-tree microservice's filter will listen for.\n    }\n\n    /**\n    Append leaves to the tree\n    */\n    function _insertLeaves(bytes32[] calldata leafValues) external onlyOwner {\n\n        bytes32 root = insertLeaves(leafValues); // recalculate the root of the tree\n\n        // emit newLeaf(leafCount, leafValue, root); // this event is what the merkle-tree microservice's filter will listen for.\n    }\n}\n",
  "sourcePath": "/Users/em137vl/git/merkle/deployer/contracts/MerkleTreeController.sol",
  "ast": {
    "absolutePath": "/Users/em137vl/git/merkle/deployer/contracts/MerkleTreeController.sol",
    "exportedSymbols": {
      "MerkleTreeController": [
        658
      ]
    },
    "id": 659,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 591,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "134:23:1"
      },
      {
        "absolutePath": "/Users/em137vl/git/merkle/deployer/contracts/MerkleTree.sol",
        "file": "./MerkleTree.sol",
        "id": 592,
        "nodeType": "ImportDirective",
        "scope": 659,
        "sourceUnit": 590,
        "src": "159:26:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 593,
              "name": "MerkleTree",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 589,
              "src": "220:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTree_$589",
                "typeString": "contract MerkleTree"
              }
            },
            "id": 594,
            "nodeType": "InheritanceSpecifier",
            "src": "220:10:1"
          }
        ],
        "contractDependencies": [
          589
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 658,
        "linearizedBaseContracts": [
          658,
          589
        ],
        "name": "MerkleTreeController",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 596,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 658,
            "src": "238:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 595,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "238:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 600,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 658,
            "src": "371:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 599,
              "keyType": {
                "id": 597,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "379:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "371:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 598,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "390:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 602,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 658,
            "src": "556:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 601,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "556:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 613,
              "nodeType": "Block",
              "src": "927:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 608,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 605,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 673,
                            "src": "945:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 606,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "945:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 607,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 596,
                          "src": "959:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "945:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "966:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 604,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        676,
                        677
                      ],
                      "referencedDeclaration": 677,
                      "src": "937:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 610,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "937:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 611,
                  "nodeType": "ExpressionStatement",
                  "src": "937:78:1"
                },
                {
                  "id": 612,
                  "nodeType": "PlaceholderStatement",
                  "src": "1025:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 614,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "924:2:1"
            },
            "src": "906:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 627,
              "nodeType": "Block",
              "src": "1397:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 625,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 622,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 596,
                      "src": "1407:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 623,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "1415:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 624,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1415:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1407:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 626,
                  "nodeType": "ExpressionStatement",
                  "src": "1407:18:1"
                }
              ]
            },
            "documentation": "Constructor for the MerkleTreeController contract. We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below):",
            "id": 628,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 619,
                    "name": "_treeHeight",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 616,
                    "src": "1377:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 620,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 618,
                  "name": "MerkleTree",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 589,
                  "src": "1366:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MerkleTree_$589_$",
                    "typeString": "type(contract MerkleTree)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1366:23:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 617,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 616,
                  "name": "_treeHeight",
                  "nodeType": "VariableDeclaration",
                  "scope": 628,
                  "src": "1348:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 615,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1348:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1347:18:1"
            },
            "returnParameters": {
              "id": 621,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1397:0:1"
            },
            "scope": 658,
            "src": "1336:96:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 641,
              "nodeType": "Block",
              "src": "1542:221:1",
              "statements": [
                {
                  "assignments": [
                    636
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 636,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 641,
                      "src": "1553:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 635,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1553:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 640,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 638,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "1579:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 637,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 252,
                      "src": "1568:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1568:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1553:36:1"
                }
              ]
            },
            "documentation": "Append a leaf to the tree",
            "id": 642,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 633,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 632,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 614,
                  "src": "1532:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1532:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 631,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 630,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 642,
                  "src": "1504:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 629,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1504:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1503:19:1"
            },
            "returnParameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1542:0:1"
            },
            "scope": 658,
            "src": "1483:280:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 656,
              "nodeType": "Block",
              "src": "1887:224:1",
              "statements": [
                {
                  "assignments": [
                    651
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 651,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 656,
                      "src": "1898:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 650,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1898:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 655,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 653,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 645,
                        "src": "1926:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 652,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 523,
                      "src": "1913:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1913:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1898:39:1"
                }
              ]
            },
            "documentation": "Append leaves to the tree",
            "id": 657,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 648,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 647,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 614,
                  "src": "1877:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1877:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 646,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 645,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 657,
                  "src": "1837:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 643,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1837:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 644,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1837:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1836:31:1"
            },
            "returnParameters": {
              "id": 649,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1887:0:1"
            },
            "scope": 658,
            "src": "1814:297:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 659,
        "src": "187:1926:1"
      }
    ],
    "src": "134:1980:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/em137vl/git/merkle/deployer/contracts/MerkleTreeController.sol",
    "exportedSymbols": {
      "MerkleTreeController": [
        658
      ]
    },
    "id": 659,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 591,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "134:23:1"
      },
      {
        "absolutePath": "/Users/em137vl/git/merkle/deployer/contracts/MerkleTree.sol",
        "file": "./MerkleTree.sol",
        "id": 592,
        "nodeType": "ImportDirective",
        "scope": 659,
        "sourceUnit": 590,
        "src": "159:26:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 593,
              "name": "MerkleTree",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 589,
              "src": "220:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTree_$589",
                "typeString": "contract MerkleTree"
              }
            },
            "id": 594,
            "nodeType": "InheritanceSpecifier",
            "src": "220:10:1"
          }
        ],
        "contractDependencies": [
          589
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 658,
        "linearizedBaseContracts": [
          658,
          589
        ],
        "name": "MerkleTreeController",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 596,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 658,
            "src": "238:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 595,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "238:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 600,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 658,
            "src": "371:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 599,
              "keyType": {
                "id": 597,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "379:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "371:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 598,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "390:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 602,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 658,
            "src": "556:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 601,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "556:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 613,
              "nodeType": "Block",
              "src": "927:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 608,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 605,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 673,
                            "src": "945:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 606,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "945:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 607,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 596,
                          "src": "959:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "945:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "966:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 604,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        676,
                        677
                      ],
                      "referencedDeclaration": 677,
                      "src": "937:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 610,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "937:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 611,
                  "nodeType": "ExpressionStatement",
                  "src": "937:78:1"
                },
                {
                  "id": 612,
                  "nodeType": "PlaceholderStatement",
                  "src": "1025:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 614,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "924:2:1"
            },
            "src": "906:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 627,
              "nodeType": "Block",
              "src": "1397:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 625,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 622,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 596,
                      "src": "1407:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 623,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "1415:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 624,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1415:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1407:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 626,
                  "nodeType": "ExpressionStatement",
                  "src": "1407:18:1"
                }
              ]
            },
            "documentation": "Constructor for the MerkleTreeController contract. We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below):",
            "id": 628,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 619,
                    "name": "_treeHeight",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 616,
                    "src": "1377:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 620,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 618,
                  "name": "MerkleTree",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 589,
                  "src": "1366:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MerkleTree_$589_$",
                    "typeString": "type(contract MerkleTree)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1366:23:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 617,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 616,
                  "name": "_treeHeight",
                  "nodeType": "VariableDeclaration",
                  "scope": 628,
                  "src": "1348:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 615,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1348:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1347:18:1"
            },
            "returnParameters": {
              "id": 621,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1397:0:1"
            },
            "scope": 658,
            "src": "1336:96:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 641,
              "nodeType": "Block",
              "src": "1542:221:1",
              "statements": [
                {
                  "assignments": [
                    636
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 636,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 641,
                      "src": "1553:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 635,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1553:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 640,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 638,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 630,
                        "src": "1579:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 637,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 252,
                      "src": "1568:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1568:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1553:36:1"
                }
              ]
            },
            "documentation": "Append a leaf to the tree",
            "id": 642,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 633,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 632,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 614,
                  "src": "1532:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1532:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 631,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 630,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 642,
                  "src": "1504:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 629,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1504:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1503:19:1"
            },
            "returnParameters": {
              "id": 634,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1542:0:1"
            },
            "scope": 658,
            "src": "1483:280:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 656,
              "nodeType": "Block",
              "src": "1887:224:1",
              "statements": [
                {
                  "assignments": [
                    651
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 651,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 656,
                      "src": "1898:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 650,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1898:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 655,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 653,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 645,
                        "src": "1926:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 652,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 523,
                      "src": "1913:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 654,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1913:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1898:39:1"
                }
              ]
            },
            "documentation": "Append leaves to the tree",
            "id": 657,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 648,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 647,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 614,
                  "src": "1877:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1877:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 646,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 645,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 657,
                  "src": "1837:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 643,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "1837:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 644,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "1837:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1836:31:1"
            },
            "returnParameters": {
              "id": 649,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1887:0:1"
            },
            "scope": 658,
            "src": "1814:297:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 659,
        "src": "187:1926:1"
      }
    ],
    "src": "134:1980:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-11-06T16:31:02.759Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "notice": "Append a leaf to the tree"
      },
      "_insertLeaves(bytes32[])": {
        "notice": "Append leaves to the tree"
      },
      "constructor": "Constructor for the MerkleTreeController contract. We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below):"
    }
  }
}