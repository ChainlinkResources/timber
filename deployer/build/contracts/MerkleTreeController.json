{
  "contractName": "MerkleTreeController",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "treeHeight",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "valuesToConvertToLeafValues",
          "type": "uint256[25]"
        }
      ],
      "name": "bytes32ArrayEncoder",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "leafCount",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "valueToConvertToLeafValue",
          "type": "uint256"
        }
      ],
      "name": "bytes32Encoder",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "insertLeaf",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "treeWidth",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "latestRoot",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "insertLeaves",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_treeHeight",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValue",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "newLeaf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "minLeafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "leafValues",
          "type": "bytes32[]"
        },
        {
          "indexed": false,
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "newLeaves",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValue",
          "type": "bytes32"
        }
      ],
      "name": "_insertLeaf",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "leafValues",
          "type": "bytes32[]"
        }
      ],
      "name": "_insertLeaves",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"treeHeight\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"_insertLeaves\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valuesToConvertToLeafValues\",\"type\":\"uint256[25]\"}],\"name\":\"bytes32ArrayEncoder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"leafCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"valueToConvertToLeafValue\",\"type\":\"uint256\"}],\"name\":\"bytes32Encoder\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"insertLeaf\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValue\",\"type\":\"bytes32\"}],\"name\":\"_insertLeaf\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"treeWidth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"roots\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"leafValues\",\"type\":\"bytes32[]\"}],\"name\":\"insertLeaves\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_treeHeight\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"newLeaf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"minLeafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"leafValues\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"newLeaves\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"}},\"_insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"}},\"constructor\":{\"params\":{\"_treeHeight\":\"- the height of the tree (see the base contract for a disambiguation of what is meant by 'height'). We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \\\"modifier\\\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \\\"modifier\\\" directly below).\"}},\"insertLeaf(bytes32)\":{\"params\":{\"leafValue\":\"- the value of the leaf being inserted.\"},\"return\":\"bytes32 - the root of the merkle tree, after the insert.\"},\"insertLeaves(bytes32[])\":{\"params\":{\"leafValues\":\"- the values of the leaves being inserted.\"},\"return\":\"bytes32[] - the root of the merkle tree, after all the inserts.\"}}},\"userdoc\":{\"methods\":{\"_insertLeaf(bytes32)\":{\"notice\":\"Append a leaf to the tree\"},\"_insertLeaves(bytes32[])\":{\"notice\":\"Append leaves to the tree\"},\"constructor\":\"Constructor for the MerkleTreeController contract.\",\"insertLeaf(bytes32)\":{\"notice\":\"Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier.\"},\"insertLeaves(bytes32[])\":{\"notice\":\"Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTreeController.sol\":\"MerkleTreeController\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTree.sol\":{\"keccak256\":\"0x572a6ac5ad3b7bd605e4da8612a4c2bc2d2c63d8dc2ab37e5ed1caaba299f6a0\",\"urls\":[\"bzzr://e175197b3b555e8a560638edf2b5c7841cb420b74268d7f994076407936f93ae\"]},\"/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTreeController.sol\":{\"keccak256\":\"0xd57ffcec7c5810e1e91db8227d68816c5c5ffbff6e8497eebb2d1144b733710f\",\"urls\":[\"bzzr://177b002c606702e0043039fdff14d221ad301d7a1470321f65394669f2e7acbe\"]}},\"version\":1}",
  "bytecode": "0x60806040526000801b60005534801561001757600080fd5b50604051602080610e828339810180604052602081101561003757600080fd5b810190808051906020019092919050505080806001819055508060020a6002819055505033602560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610dd6806100ac6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806371b625411161007157806371b625411461026d57806376c601b11461029b5780638da5cb5b146102b9578063ae6dead714610303578063d7b0fef114610345578063dc52bf9f14610363576100b4565b806301e3e915146100b957806303ebd1d4146100d7578063226ae84a1461015057806330e69fc3146101cb5780634b6e4222146101e95780635c8b80ab1461022b575b600080fd5b6100c161042f565b6040518082815260200191505060405180910390f35b61014e600480360360208110156100ed57600080fd5b810190808035906020019064010000000081111561010a57600080fd5b82018360208201111561011c57600080fd5b8035906020019184602083028401116401000000008311171561013e57600080fd5b9091929391929390505050610435565b005b6101b5600480360361032081101561016757600080fd5b810190808061032001906019806020026040519081016040528092919082601960200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610535565b6040518082815260200191505060405180910390f35b6101d36105c6565b6040518082815260200191505060405180910390f35b610215600480360360208110156101ff57600080fd5b81019080803590602001909291905050506105cc565b6040518082815260200191505060405180910390f35b6102576004803603602081101561024157600080fd5b81019080803590602001909291905050506105e6565b6040518082815260200191505060405180910390f35b6102996004803603602081101561028357600080fd5b81019080803590602001909291905050506107ca565b005b6102a3610888565b6040518082815260200191505060405180910390f35b6102c161088e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61032f6004803603602081101561031957600080fd5b81019080803590602001909291905050506108b4565b6040518082815260200191505060405180910390f35b61034d6108cc565b6040518082815260200191505060405180910390f35b6104196004803603602081101561037957600080fd5b810190808035906020019064010000000081111561039657600080fd5b8201836020820111156103a857600080fd5b803590602001918460208302840111640100000000831117156103ca57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506108d2565b6040518082815260200191505060405180910390f35b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d7d602e913960400191505060405180910390fd5b6000610527838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506108d2565b905080602781905550505050565b6000606060196040519080825280602002602001820160405280156105695781602001602082028038833980820191505090505b50905060008090505b60198110156105b45783816019811061058757fe5b602002015160001b82828151811061059b57fe5b6020026020010181815250508080600101915050610572565b506105be816108d2565b915050919050565b60245481565b6000808260001b90506105de816105e6565b915050919050565b6000806105f4602454610cc1565b905060006001600254602454010390506000849050610611610d38565b610619610d5a565b600080600090505b600154811015610760578681141561064757846003886021811061064157fe5b01819055505b60006002878161065357fe5b0614156106e0576003816021811061066757fe5b01548460006002811061067657fe5b602002018181525050848460016002811061068d57fe5b60200201818152505060208360408660006002600019f1915081600081146106b4576106b6565bfe5b50826000600181106106c457fe5b60200201519450600260018703816106d857fe5b049550610753565b84846000600281106106ee57fe5b6020020181815250506000548460016002811061070757fe5b60200201818152505060208360408660006002600019f19150816000811461072e57610730565bfe5b508260006001811061073e57fe5b602002015194506002868161074f57fe5b0495505b8080600101915050610621565b507f961d75dfa6cbcadcc3eb9732500ab98db65e36ae3ebe7f32daa7b1c37dc731b1602454898660405180848152602001838152602001828152602001935050505060405180910390a1602460008154809291906001019190505550839650505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d7d602e913960400191505060405180910390fd5b600061087b826105e6565b9050806027819055505050565b60025481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b6000808251905060245460025403811115610922576000602454600254038203905060008090505b81811015610916576001855103855280806001019150506108fa565b50602454600254039150505b600080600061092f610d38565b610937610d5a565b60008060245490505b8760245401811015610ae8578960245482038151811061095c57fe5b602002602001015194506001600254820103955061097981610cc1565b9650600087141561099c57846003886021811061099257fe5b0181905550610adb565b6000600190505b878111610ac6576000600288816109b657fe5b061415610a4657600360018203602181106109cd57fe5b0154856000600281106109dc57fe5b60200201818152505085856001600281106109f357fe5b60200201818152505060208460408760006002600019f192508260008114610a1a57610a1c565bfe5b5083600060018110610a2a57fe5b6020020151955060026001880381610a3e57fe5b049650610ab9565b8585600060028110610a5457fe5b60200201818152505060005485600160028110610a6d57fe5b60200201818152505060208460408760006002600019f192508260008114610a9457610a96565bfe5b5083600060018110610aa457fe5b6020020151955060028781610ab557fe5b0496505b80806001019150506109a3565b508460038860218110610ad557fe5b01819055505b8080600101915050610940565b5060006001870190505b6001548111610c1757600060028781610b0757fe5b061415610b975760036001820360218110610b1e57fe5b015484600060028110610b2d57fe5b6020020181815250508484600160028110610b4457fe5b60200201818152505060208360408660006002600019f191508160008114610b6b57610b6d565bfe5b5082600060018110610b7b57fe5b6020020151945060026001870381610b8f57fe5b049550610c0a565b8484600060028110610ba557fe5b60200201818152505060005484600160028110610bbe57fe5b60200201818152505060208360408660006002600019f191508160008114610be557610be7565bfe5b5082600060018110610bf557fe5b6020020151945060028681610c0657fe5b0495505b8080600101915050610af2565b507f90804955ce158dc0821dd7cbb6eaa48ad3e31bd650e7ef7f7b819e525acdad136024548a866040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c8d578082015181840152602081019050610c72565b5050505090500194505050505060405180910390a18660246000828254019250508190555083975050505050505050919050565b6000809050600160028381610cd257fe5b061415610d33576000600190506000600290506000600182901b90505b6000841415610d2f5760008183600188010381610d0857fe5b061415610d1757829350610d2a565b809150600181901b905082806001019350505b610cef565b5050505b919050565b6040518060400160405280600290602082028038833980820191505090505090565b604051806020016040528060019060208202803883398082019150509050509056fe596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a723058201ed7fe8f3420f6aff2b579b6441d6e98f38e948d0b6a39710b59b754cfcea7440029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806371b625411161007157806371b625411461026d57806376c601b11461029b5780638da5cb5b146102b9578063ae6dead714610303578063d7b0fef114610345578063dc52bf9f14610363576100b4565b806301e3e915146100b957806303ebd1d4146100d7578063226ae84a1461015057806330e69fc3146101cb5780634b6e4222146101e95780635c8b80ab1461022b575b600080fd5b6100c161042f565b6040518082815260200191505060405180910390f35b61014e600480360360208110156100ed57600080fd5b810190808035906020019064010000000081111561010a57600080fd5b82018360208201111561011c57600080fd5b8035906020019184602083028401116401000000008311171561013e57600080fd5b9091929391929390505050610435565b005b6101b5600480360361032081101561016757600080fd5b810190808061032001906019806020026040519081016040528092919082601960200280828437600081840152601f19601f8201169050808301925050505050509192919290505050610535565b6040518082815260200191505060405180910390f35b6101d36105c6565b6040518082815260200191505060405180910390f35b610215600480360360208110156101ff57600080fd5b81019080803590602001909291905050506105cc565b6040518082815260200191505060405180910390f35b6102576004803603602081101561024157600080fd5b81019080803590602001909291905050506105e6565b6040518082815260200191505060405180910390f35b6102996004803603602081101561028357600080fd5b81019080803590602001909291905050506107ca565b005b6102a3610888565b6040518082815260200191505060405180910390f35b6102c161088e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61032f6004803603602081101561031957600080fd5b81019080803590602001909291905050506108b4565b6040518082815260200191505060405180910390f35b61034d6108cc565b6040518082815260200191505060405180910390f35b6104196004803603602081101561037957600080fd5b810190808035906020019064010000000081111561039657600080fd5b8201836020820111156103a857600080fd5b803590602001918460208302840111640100000000831117156103ca57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506108d2565b6040518082815260200191505060405180910390f35b60015481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d7d602e913960400191505060405180910390fd5b6000610527838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050506108d2565b905080602781905550505050565b6000606060196040519080825280602002602001820160405280156105695781602001602082028038833980820191505090505b50905060008090505b60198110156105b45783816019811061058757fe5b602002015160001b82828151811061059b57fe5b6020026020010181815250508080600101915050610572565b506105be816108d2565b915050919050565b60245481565b6000808260001b90506105de816105e6565b915050919050565b6000806105f4602454610cc1565b905060006001600254602454010390506000849050610611610d38565b610619610d5a565b600080600090505b600154811015610760578681141561064757846003886021811061064157fe5b01819055505b60006002878161065357fe5b0614156106e0576003816021811061066757fe5b01548460006002811061067657fe5b602002018181525050848460016002811061068d57fe5b60200201818152505060208360408660006002600019f1915081600081146106b4576106b6565bfe5b50826000600181106106c457fe5b60200201519450600260018703816106d857fe5b049550610753565b84846000600281106106ee57fe5b6020020181815250506000548460016002811061070757fe5b60200201818152505060208360408660006002600019f19150816000811461072e57610730565bfe5b508260006001811061073e57fe5b602002015194506002868161074f57fe5b0495505b8080600101915050610621565b507f961d75dfa6cbcadcc3eb9732500ab98db65e36ae3ebe7f32daa7b1c37dc731b1602454898660405180848152602001838152602001828152602001935050505060405180910390a1602460008154809291906001019190505550839650505050505050919050565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180610d7d602e913960400191505060405180910390fd5b600061087b826105e6565b9050806027819055505050565b60025481565b602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60266020528060005260406000206000915090505481565b60275481565b6000808251905060245460025403811115610922576000602454600254038203905060008090505b81811015610916576001855103855280806001019150506108fa565b50602454600254039150505b600080600061092f610d38565b610937610d5a565b60008060245490505b8760245401811015610ae8578960245482038151811061095c57fe5b602002602001015194506001600254820103955061097981610cc1565b9650600087141561099c57846003886021811061099257fe5b0181905550610adb565b6000600190505b878111610ac6576000600288816109b657fe5b061415610a4657600360018203602181106109cd57fe5b0154856000600281106109dc57fe5b60200201818152505085856001600281106109f357fe5b60200201818152505060208460408760006002600019f192508260008114610a1a57610a1c565bfe5b5083600060018110610a2a57fe5b6020020151955060026001880381610a3e57fe5b049650610ab9565b8585600060028110610a5457fe5b60200201818152505060005485600160028110610a6d57fe5b60200201818152505060208460408760006002600019f192508260008114610a9457610a96565bfe5b5083600060018110610aa457fe5b6020020151955060028781610ab557fe5b0496505b80806001019150506109a3565b508460038860218110610ad557fe5b01819055505b8080600101915050610940565b5060006001870190505b6001548111610c1757600060028781610b0757fe5b061415610b975760036001820360218110610b1e57fe5b015484600060028110610b2d57fe5b6020020181815250508484600160028110610b4457fe5b60200201818152505060208360408660006002600019f191508160008114610b6b57610b6d565bfe5b5082600060018110610b7b57fe5b6020020151945060026001870381610b8f57fe5b049550610c0a565b8484600060028110610ba557fe5b60200201818152505060005484600160028110610bbe57fe5b60200201818152505060208360408660006002600019f191508160008114610be557610be7565bfe5b5082600060018110610bf557fe5b6020020151945060028681610c0657fe5b0495505b8080600101915050610af2565b507f90804955ce158dc0821dd7cbb6eaa48ad3e31bd650e7ef7f7b819e525acdad136024548a866040518084815260200180602001838152602001828103825284818151815260200191508051906020019060200280838360005b83811015610c8d578082015181840152602081019050610c72565b5050505090500194505050505060405180910390a18660246000828254019250508190555083975050505050505050919050565b6000809050600160028381610cd257fe5b061415610d33576000600190506000600290506000600182901b90505b6000841415610d2f5760008183600188010381610d0857fe5b061415610d1757829350610d2a565b809150600181901b905082806001019350505b610cef565b5050505b919050565b6040518060400160405280600290602082028038833980820191505090505090565b604051806020016040528060019060208202803883398082019150509050509056fe596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6ea165627a7a723058201ed7fe8f3420f6aff2b579b6441d6e98f38e948d0b6a39710b59b754cfcea7440029",
  "sourceMap": "243:2062:1:-;;;2129:66:0;2114:81;;;;1528:96:1;8:9:-1;5:2;;;30:1;27;20:12;5:2;1528:96:1;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1528:96:1;;;;;;;;;;;;;;;;1569:11;2623::0;2610:10;:24;;;;2661:11;2656:1;:16;2644:9;:28;;;;2563:169;1607:10:1;1599:5;;:18;;;;;;;;;;;;;;;;;;1528:96;243:2062;;;;;;",
  "deployedSourceMap": "243:2062:1:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;243:2062:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2201:22:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2077:226:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2077:226:1;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;2077:226:1;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;2077:226:1;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;2077:226:1;;;;;;;;;;;;:::i;:::-;;12500:355:0;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;12500:355:0;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;12500:355:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2486:24;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12169:190;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12169:190:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3860:2340;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3860:2340:0;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1744:209:1;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1744:209:1;;;;;;;;;;;;;;;;;:::i;:::-;;2229:21:0;;;:::i;:::-;;;;;;;;;;;;;;;;;;;294:20:1;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;427:40;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;427:40:1;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;612:25;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6506:5626:0;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6506:5626:0;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;6506:5626:0;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;6506:5626:0;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;6506:5626:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;6506:5626:0;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2201:22;;;;:::o;2077:226:1:-;1015:5;;;;;;;;;;;1001:19;;:10;:19;;;993:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2161:12;2176:24;2189:10;;2176:24;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;2176:24:1;;;;;;:12;:24::i;:::-;2161:39;;2292:4;2279:10;:17;;;;1081:1;2077:226;;:::o;12500:355:0:-;12590:7;12609:27;12653:2;12639:17;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;12639:17:0;;;;12609:47;;12671:6;12680:1;12671:10;;12666:142;12687:34;12683:1;:38;12666:142;;;12766:27;12794:1;12766:30;;;;;;;;;;;12758:39;;12742:10;12753:1;12742:13;;;;;;;;;;;;;:55;;;;;12723:3;;;;;;;12666:142;;;;12824:24;12837:10;12824:12;:24::i;:::-;12817:31;;;12500:355;;;:::o;2486:24::-;;;;:::o;12169:190::-;12241:7;12260:17;12288:25;12280:34;;12260:54;;12331:21;12342:9;12331:10;:21::i;:::-;12324:28;;;12169:190;;;:::o;3860:2340::-;3915:7;3935:9;3947:26;3963:9;;3947:15;:26::i;:::-;3935:38;;3983:14;4024:1;4012:9;;4000;;:21;:25;3983:42;;4035:17;4055:9;4035:29;;4185:24;;:::i;:::-;4270;;:::i;:::-;4304:12;4333:10;4346:1;4333:14;;4328:1420;4357:10;;4349:5;:18;4328:1420;;;4406:4;4397:5;:13;4393:45;;;4429:9;4412:8;4421:4;4412:14;;;;;;;;:26;;;;4393:45;4474:1;4469;4457:9;:13;;;;;;:18;4453:1285;;;4541:8;4550:5;4541:15;;;;;;;;;4529:6;4536:1;4529:9;;;;;;;;;;:27;;;;;4586:9;4574:6;4581:1;4574:9;;;;;;;;;;:21;;;;;4861:4;4853:6;4847:4;4839:6;4836:1;4833;4829;4825:6;4820:46;4809:57;;4959:7;4972:1;4967:20;;;;4952:35;;4967:20;4976:9;4952:35;;5034:6;5041:1;5034:9;;;;;;;;;;;5022:21;;5159:1;5154;5142:9;:13;5141:19;;;;;;5129:31;;4453:1285;;;5272:9;5260:6;5267:1;5260:9;;;;;;;;;;:21;;;;;5311:4;;5299:6;5306:1;5299:9;;;;;;;;;;:16;;;;;5467:4;5459:6;5453:4;5445:6;5442:1;5439;5435;5431:6;5426:46;5415:57;;5500:7;5513:1;5508:20;;;;5493:35;;5508:20;5517:9;5493:35;;5575:6;5582:1;5575:9;;;;;;;;;;;5563:21;;5694:1;5682:9;:13;;;;;;5670:25;;4453:1285;4369:7;;;;;;;4328:1420;;;;5919:40;5927:9;;5938;5949;5919:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6047:9;;:11;;;;;;;;;;;;;6161:9;6154:16;;;;;;;;3860:2340;;;:::o;1744:209:1:-;1015:5;;;;;;;;;;;1001:19;;:10;:19;;;993:78;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1814:12;1829:21;1840:9;1829:10;:21::i;:::-;1814:36;;1942:4;1929:10;:17;;;;1081:1;1744:209;:::o;2229:21:0:-;;;;:::o;294:20:1:-;;;;;;;;;;;;;:::o;427:40::-;;;;;;;;;;;;;;;;;:::o;612:25::-;;;;:::o;6506:5626:0:-;6573:7;6592:19;6614:10;:17;6592:39;;6724:9;;6712;;:21;6695:14;:38;6690:730;;;6750:25;6808:9;;6796;;:21;6778:14;:40;6750:68;;6938:7;6948:1;6938:11;;6933:425;6956:20;6951:2;:25;6933:425;;;7323:1;7310:10;7304:17;7300:25;7288:10;7281:45;6978:4;;;;;;;6933:425;;;;7400:9;;7388;;:21;7371:38;;6690:730;;7430:9;7449:14;7473:17;7501:24;;:::i;:::-;7586;;:::i;:::-;7646:12;7737:14;7754:9;;7737:26;;7732:2382;7789:14;7777:9;;:26;7765:9;:38;7732:2382;;;7844:10;7867:9;;7855;:21;7844:33;;;;;;;;;;;;;;7832:45;;7927:1;7915:9;;7903;:21;:25;7891:37;;7990:26;8006:9;7990:15;:26::i;:::-;7983:33;;8110:1;8102:4;:9;8098:121;;;8148:9;8131:8;8140:4;8131:14;;;;;;;;:26;;;;8196:8;;8098:121;8324:10;8337:1;8324:14;;8319:1724;8349:4;8340:5;:13;8319:1724;;8403:1;8398;8386:9;:13;;;;;;:18;8382:1647;;;8478:8;8495:1;8487:5;:9;8478:19;;;;;;;;;8466:6;8473:1;8466:9;;;;;;;;;;:31;;;;;8531:9;8519:6;8526:1;8519:9;;;;;;;;;;:21;;;;;8822:4;8814:6;8808:4;8800:6;8797:1;8794;8790;8786:6;8781:46;8770:57;;8928:7;8941:1;8936:20;;;;8921:35;;8936:20;8945:9;8921:35;;9122:6;9129:1;9122:9;;;;;;;;;;;9110:21;;9251:1;9246;9234:9;:13;9233:19;;;;;;9221:31;;8382:1647;;;9376:9;9364:6;9371:1;9364:9;;;;;;;;;;:21;;;;;9419:4;;9407:6;9414:1;9407:9;;;;;;;;;;:16;;;;;9587:4;9579:6;9573:4;9565:6;9562:1;9559;9555;9551:6;9546:46;9535:57;;9624:7;9637:1;9632:20;;;;9617:35;;9632:20;9641:9;9617:35;;9818:6;9825:1;9818:9;;;;;;;;;;;9806:21;;9941:1;9929:9;:13;;;;;;9917:25;;8382:1647;8355:7;;;;;;;8319:1724;;;;10073:9;10056:8;10065:4;10056:14;;;;;;;;:26;;;;7732:2382;7805:11;;;;;;;7732:2382;;;;10284:10;10304:1;10297:4;:8;10284:21;;10279:1489;10316:10;;10307:5;:19;10279:1489;;10373:1;10368;10356:9;:13;;;;;;:18;10352:1406;;;10440:8;10457:1;10449:5;:9;10440:19;;;;;;;;;10428:6;10435:1;10428:9;;;;;;;;;;:31;;;;;10489:9;10477:6;10484:1;10477:9;;;;;;;;;;:21;;;;;10650:4;10642:6;10636:4;10628:6;10625:1;10622;10618;10614:6;10609:46;10598:57;;10683:7;10696:1;10691:20;;;;10676:35;;10691:20;10700:9;10676:35;;10865:6;10872:1;10865:9;;;;;;;;;;;10853:21;;10990:1;10985;10973:9;:13;10972:19;;;;;;10960:31;;10352:1406;;;11144:9;11132:6;11139:1;11132:9;;;;;;;;;;:21;;;;;11183:4;;11171:6;11178:1;11171:9;;;;;;;;;;:16;;;;;11339:4;11331:6;11325:4;11317:6;11314:1;11311;11307;11303:6;11298:46;11287:57;;11372:7;11385:1;11380:20;;;;11365:35;;11380:20;11389:9;11365:35;;11554:6;11561:1;11554:9;;;;;;;;;;;11542:21;;11673:1;11661:9;:13;;;;;;11649:25;;10352:1406;10328:7;;;;;;;10279:1489;;;;11832:43;11842:9;;11853:10;11865:9;11832:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11832:43:0;;;;;;;;;;;;;;;;;;;11976:14;11963:9;;:27;;;;;;;;;;;12093:9;12086:16;;;;;;;;;6506:5626;;;:::o;3068:515::-;3131:9;3159:1;3152:8;;3192:1;3187;3175:9;:13;;;;;;:18;3170:407;;;3210:9;3222:1;3210:13;;3237:9;3249:1;3237:13;;3264:9;3284:1;3276:4;:9;;3264:21;;3299:268;3314:1;3306:4;:9;3299:268;;;3373:1;3365:4;3357;3353:1;3341:9;:13;:20;3340:29;;;;;;:34;3335:218;;;3406:4;3399:11;;3335:218;;;3464:4;3457:11;;3505:1;3497:4;:9;;3490:16;;3528:6;;;;;;;3335:218;3299:268;;;3170:407;;;;3068:515;;;:::o;243:2062:1:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;243:2062:1;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;243:2062:1;;;;:::o",
  "source": "/**\nContract to manage permissions to update the leaves of the imported MerkleTree contract (which is the base contract which handles tree inserts and updates).\n\n@Author iAmMichaelConnor\n*/\npragma solidity ^0.5.8;\n\nimport \"./MerkleTree.sol\";\n\ncontract MerkleTreeController is MerkleTree {\n\n    address public owner; // We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n\n    mapping(bytes32 => bytes32) public roots; // Example of a way to hold every root that's been calculated by this contract. This isn't actually used by this simple example-contract.\n\n    bytes32 public latestRoot; // Example of a way to hold the latest root so that users can retrieve it. This isn't actually used by this simple example-contract.\n\n    /**\n    We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n    @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"You are not authorised to invoke this function\");\n        _;\n    }\n\n    /**\n    @notice Constructor for the MerkleTreeController contract.\n    @param _treeHeight - the height of the tree (see the base contract for a disambiguation of what is meant by 'height').\n\n    We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below).\n    */\n    constructor(uint _treeHeight) MerkleTree(_treeHeight) public {\n        owner = msg.sender;\n    }\n\n    /**\n    @notice Append a leaf to the tree\n    @param leafValue - the value of the leaf being inserted.\n    */\n    function _insertLeaf(bytes32 leafValue) external onlyOwner {\n\n        bytes32 root = insertLeaf(leafValue); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n\n    /**\n    @notice Append leaves to the tree\n    @param leafValues - the values of the leaves being inserted.\n    */\n    function _insertLeaves(bytes32[] calldata leafValues) external onlyOwner {\n\n        bytes32 root = insertLeaves(leafValues); // recalculate the root of the tree\n\n        // roots[root] = root;\n\n        latestRoot = root;\n    }\n}\n",
  "sourcePath": "/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTreeController.sol",
  "ast": {
    "absolutePath": "/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTreeController.sol",
    "exportedSymbols": {
      "MerkleTreeController": [
        690
      ]
    },
    "id": 691,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 615,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:1"
      },
      {
        "absolutePath": "/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTree.sol",
        "file": "./MerkleTree.sol",
        "id": 616,
        "nodeType": "ImportDirective",
        "scope": 691,
        "sourceUnit": 614,
        "src": "215:26:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 617,
              "name": "MerkleTree",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 613,
              "src": "276:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTree_$613",
                "typeString": "contract MerkleTree"
              }
            },
            "id": 618,
            "nodeType": "InheritanceSpecifier",
            "src": "276:10:1"
          }
        ],
        "contractDependencies": [
          613
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 690,
        "linearizedBaseContracts": [
          690,
          613
        ],
        "name": "MerkleTreeController",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 620,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 690,
            "src": "294:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 619,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "294:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 624,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 690,
            "src": "427:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 623,
              "keyType": {
                "id": 621,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "435:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "427:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 622,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "446:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 626,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 690,
            "src": "612:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 625,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "612:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 637,
              "nodeType": "Block",
              "src": "983:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 632,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 629,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 705,
                            "src": "1001:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 630,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1001:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 631,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 620,
                          "src": "1015:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1001:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1022:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 628,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        708,
                        709
                      ],
                      "referencedDeclaration": 709,
                      "src": "993:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 634,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "993:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 635,
                  "nodeType": "ExpressionStatement",
                  "src": "993:78:1"
                },
                {
                  "id": 636,
                  "nodeType": "PlaceholderStatement",
                  "src": "1081:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 638,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 627,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "980:2:1"
            },
            "src": "962:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 651,
              "nodeType": "Block",
              "src": "1589:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 646,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 620,
                      "src": "1599:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 647,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 705,
                        "src": "1607:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 648,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1607:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1599:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 650,
                  "nodeType": "ExpressionStatement",
                  "src": "1599:18:1"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.\n@param _treeHeight - the height of the tree (see the base contract for a disambiguation of what is meant by 'height').\nWe also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below).",
            "id": 652,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 643,
                    "name": "_treeHeight",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 640,
                    "src": "1569:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 644,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 642,
                  "name": "MerkleTree",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 613,
                  "src": "1558:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MerkleTree_$613_$",
                    "typeString": "type(contract MerkleTree)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1558:23:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 641,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 640,
                  "name": "_treeHeight",
                  "nodeType": "VariableDeclaration",
                  "scope": 652,
                  "src": "1540:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 639,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1540:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1539:18:1"
            },
            "returnParameters": {
              "id": 645,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1589:0:1"
            },
            "scope": 690,
            "src": "1528:96:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 669,
              "nodeType": "Block",
              "src": "1803:150:1",
              "statements": [
                {
                  "assignments": [
                    660
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 660,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 669,
                      "src": "1814:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 659,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1814:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 664,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 662,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 654,
                        "src": "1840:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 661,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 252,
                      "src": "1829:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1829:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1814:36:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 665,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 626,
                      "src": "1929:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 666,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 660,
                      "src": "1942:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1929:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 668,
                  "nodeType": "ExpressionStatement",
                  "src": "1929:17:1"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 670,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 657,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 656,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 638,
                  "src": "1793:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1793:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 655,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 654,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 670,
                  "src": "1765:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 653,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1765:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1764:19:1"
            },
            "returnParameters": {
              "id": 658,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1803:0:1"
            },
            "scope": 690,
            "src": "1744:209:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 688,
              "nodeType": "Block",
              "src": "2150:153:1",
              "statements": [
                {
                  "assignments": [
                    679
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 679,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 688,
                      "src": "2161:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 678,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2161:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 683,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 681,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "2189:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 680,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 547,
                      "src": "2176:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 682,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2176:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2161:39:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 686,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 684,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 626,
                      "src": "2279:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 685,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 679,
                      "src": "2292:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "2279:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 687,
                  "nodeType": "ExpressionStatement",
                  "src": "2279:17:1"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 689,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 676,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 675,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 638,
                  "src": "2140:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2140:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 673,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 689,
                  "src": "2100:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 671,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2100:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 672,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "2100:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2099:31:1"
            },
            "returnParameters": {
              "id": 677,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2150:0:1"
            },
            "scope": 690,
            "src": "2077:226:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 691,
        "src": "243:2062:1"
      }
    ],
    "src": "190:2116:1"
  },
  "legacyAST": {
    "absolutePath": "/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTreeController.sol",
    "exportedSymbols": {
      "MerkleTreeController": [
        690
      ]
    },
    "id": 691,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 615,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "190:23:1"
      },
      {
        "absolutePath": "/Users/em137vl/git/merkle-tree/deployer/contracts/MerkleTree.sol",
        "file": "./MerkleTree.sol",
        "id": 616,
        "nodeType": "ImportDirective",
        "scope": 691,
        "sourceUnit": 614,
        "src": "215:26:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 617,
              "name": "MerkleTree",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 613,
              "src": "276:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_MerkleTree_$613",
                "typeString": "contract MerkleTree"
              }
            },
            "id": 618,
            "nodeType": "InheritanceSpecifier",
            "src": "276:10:1"
          }
        ],
        "contractDependencies": [
          613
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 690,
        "linearizedBaseContracts": [
          690,
          613
        ],
        "name": "MerkleTreeController",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 620,
            "name": "owner",
            "nodeType": "VariableDeclaration",
            "scope": 690,
            "src": "294:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 619,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "294:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 624,
            "name": "roots",
            "nodeType": "VariableDeclaration",
            "scope": 690,
            "src": "427:40:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
              "typeString": "mapping(bytes32 => bytes32)"
            },
            "typeName": {
              "id": 623,
              "keyType": {
                "id": 621,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "435:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "427:27:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_bytes32_$",
                "typeString": "mapping(bytes32 => bytes32)"
              },
              "valueType": {
                "id": 622,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "446:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 626,
            "name": "latestRoot",
            "nodeType": "VariableDeclaration",
            "scope": 690,
            "src": "612:25:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 625,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "612:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 637,
              "nodeType": "Block",
              "src": "983:106:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 632,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 629,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 705,
                            "src": "1001:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 630,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1001:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 631,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 620,
                          "src": "1015:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1001:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "596f7520617265206e6f7420617574686f726973656420746f20696e766f6b6520746869732066756e6374696f6e",
                        "id": 633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1022:48:1",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        },
                        "value": "You are not authorised to invoke this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_6af07f385029d971e807b8a865d509915c5562585426c93e05f8579214aa193c",
                          "typeString": "literal_string \"You are not authorised to invoke this function\""
                        }
                      ],
                      "id": 628,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        708,
                        709
                      ],
                      "referencedDeclaration": 709,
                      "src": "993:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 634,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "993:78:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 635,
                  "nodeType": "ExpressionStatement",
                  "src": "993:78:1"
                },
                {
                  "id": 636,
                  "nodeType": "PlaceholderStatement",
                  "src": "1081:1:1"
                }
              ]
            },
            "documentation": "We'll demonstrate simple 'permissioning' to update leaves by only allowing the owner to update leaves.\n@dev Throws if called by any account other than the owner.",
            "id": 638,
            "name": "onlyOwner",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 627,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "980:2:1"
            },
            "src": "962:127:1",
            "visibility": "internal"
          },
          {
            "body": {
              "id": 651,
              "nodeType": "Block",
              "src": "1589:35:1",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 649,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 646,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 620,
                      "src": "1599:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 647,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 705,
                        "src": "1607:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 648,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1607:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "1599:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 650,
                  "nodeType": "ExpressionStatement",
                  "src": "1599:18:1"
                }
              ]
            },
            "documentation": "@notice Constructor for the MerkleTreeController contract.\n@param _treeHeight - the height of the tree (see the base contract for a disambiguation of what is meant by 'height').\nWe also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below).",
            "id": 652,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 643,
                    "name": "_treeHeight",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 640,
                    "src": "1569:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 644,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 642,
                  "name": "MerkleTree",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 613,
                  "src": "1558:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_MerkleTree_$613_$",
                    "typeString": "type(contract MerkleTree)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1558:23:1"
              }
            ],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 641,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 640,
                  "name": "_treeHeight",
                  "nodeType": "VariableDeclaration",
                  "scope": 652,
                  "src": "1540:16:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 639,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1540:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1539:18:1"
            },
            "returnParameters": {
              "id": 645,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1589:0:1"
            },
            "scope": 690,
            "src": "1528:96:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 669,
              "nodeType": "Block",
              "src": "1803:150:1",
              "statements": [
                {
                  "assignments": [
                    660
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 660,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 669,
                      "src": "1814:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 659,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "1814:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 664,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 662,
                        "name": "leafValue",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 654,
                        "src": "1840:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 661,
                      "name": "insertLeaf",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 252,
                      "src": "1829:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_bytes32_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32) returns (bytes32)"
                      }
                    },
                    "id": 663,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1829:21:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1814:36:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 665,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 626,
                      "src": "1929:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 666,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 660,
                      "src": "1942:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "1929:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 668,
                  "nodeType": "ExpressionStatement",
                  "src": "1929:17:1"
                }
              ]
            },
            "documentation": "@notice Append a leaf to the tree\n@param leafValue - the value of the leaf being inserted.",
            "id": 670,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 657,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 656,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 638,
                  "src": "1793:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1793:9:1"
              }
            ],
            "name": "_insertLeaf",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 655,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 654,
                  "name": "leafValue",
                  "nodeType": "VariableDeclaration",
                  "scope": 670,
                  "src": "1765:17:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 653,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1765:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1764:19:1"
            },
            "returnParameters": {
              "id": 658,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1803:0:1"
            },
            "scope": 690,
            "src": "1744:209:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 688,
              "nodeType": "Block",
              "src": "2150:153:1",
              "statements": [
                {
                  "assignments": [
                    679
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 679,
                      "name": "root",
                      "nodeType": "VariableDeclaration",
                      "scope": 688,
                      "src": "2161:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 678,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2161:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 683,
                  "initialValue": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 681,
                        "name": "leafValues",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 673,
                        "src": "2189:10:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                          "typeString": "bytes32[] calldata"
                        }
                      ],
                      "id": 680,
                      "name": "insertLeaves",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 547,
                      "src": "2176:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes32[] memory) returns (bytes32)"
                      }
                    },
                    "id": 682,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2176:24:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "2161:39:1"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 686,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 684,
                      "name": "latestRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 626,
                      "src": "2279:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 685,
                      "name": "root",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 679,
                      "src": "2292:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "2279:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 687,
                  "nodeType": "ExpressionStatement",
                  "src": "2279:17:1"
                }
              ]
            },
            "documentation": "@notice Append leaves to the tree\n@param leafValues - the values of the leaves being inserted.",
            "id": 689,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 676,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 675,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 638,
                  "src": "2140:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2140:9:1"
              }
            ],
            "name": "_insertLeaves",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 674,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 673,
                  "name": "leafValues",
                  "nodeType": "VariableDeclaration",
                  "scope": 689,
                  "src": "2100:29:1",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 671,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "2100:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 672,
                    "length": null,
                    "nodeType": "ArrayTypeName",
                    "src": "2100:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2099:31:1"
            },
            "returnParameters": {
              "id": 677,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2150:0:1"
            },
            "scope": 690,
            "src": "2077:226:1",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 691,
        "src": "243:2062:1"
      }
    ],
    "src": "190:2116:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.9",
  "updatedAt": "2019-11-13T17:55:15.322Z",
  "devdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        }
      },
      "_insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        }
      },
      "constructor": {
        "params": {
          "_treeHeight": "- the height of the tree (see the base contract for a disambiguation of what is meant by 'height'). We also need to specify the arguments for the Base contract's (MerkleTree.sol's) constructor. We do this through a \"modifier\" of this 'derived' contract's constructor (hence the unusual 'MerkleTree' \"modifier\" directly below)."
        }
      },
      "insertLeaf(bytes32)": {
        "params": {
          "leafValue": "- the value of the leaf being inserted."
        },
        "return": "bytes32 - the root of the merkle tree, after the insert."
      },
      "insertLeaves(bytes32[])": {
        "params": {
          "leafValues": "- the values of the leaves being inserted."
        },
        "return": "bytes32[] - the root of the merkle tree, after all the inserts."
      }
    }
  },
  "userdoc": {
    "methods": {
      "_insertLeaf(bytes32)": {
        "notice": "Append a leaf to the tree"
      },
      "_insertLeaves(bytes32[])": {
        "notice": "Append leaves to the tree"
      },
      "constructor": "Constructor for the MerkleTreeController contract.",
      "insertLeaf(bytes32)": {
        "notice": "Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier."
      },
      "insertLeaves(bytes32[])": {
        "notice": "Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier."
      }
    }
  }
}